enum {
  aarch64_op_INVALID,
  aarch64_op_extended,
  aarch64_op_abs_advsimd,
  aarch64_op_adc,
  aarch64_op_adcs,
  aarch64_op_add_addsub_ext,
  aarch64_op_add_addsub_imm,
  aarch64_op_add_addsub_shift,
  aarch64_op_add_advsimd,
  aarch64_op_addhn_advsimd,
  aarch64_op_addp_advsimd_pair,
  aarch64_op_addp_advsimd_vec,
  aarch64_op_adds_addsub_ext,
  aarch64_op_adds_addsub_imm,
  aarch64_op_adds_addsub_shift,
  aarch64_op_addv_advsimd,
  aarch64_op_adr,
  aarch64_op_adrp,
  aarch64_op_aesd_advsimd,
  aarch64_op_aese_advsimd,
  aarch64_op_aesimc_advsimd,
  aarch64_op_aesmc_advsimd,
  aarch64_op_and_advsimd,
  aarch64_op_and_log_imm,
  aarch64_op_and_log_shift,
  aarch64_op_ands_log_imm,
  aarch64_op_ands_log_shift,
  aarch64_op_asr_asrv,
  aarch64_op_asr_sbfm,
  aarch64_op_asrv,
  aarch64_op_at_sys,
  aarch64_op_b_cond,
  aarch64_op_b_uncond,
  aarch64_op_bfi_bfm,
  aarch64_op_bfm,
  aarch64_op_bfxil_bfm,
  aarch64_op_bic_advsimd_imm,
  aarch64_op_bic_advsimd_reg,
  aarch64_op_bic_log_shift,
  aarch64_op_bics,
  aarch64_op_bif_advsimd,
  aarch64_op_bit_advsimd,
  aarch64_op_bl,
  aarch64_op_blr,
  aarch64_op_br,
  aarch64_op_brk,
  aarch64_op_bsl_advsimd,
  aarch64_op_cbnz,
  aarch64_op_cbz,
  aarch64_op_ccmn_imm,
  aarch64_op_ccmn_reg,
  aarch64_op_ccmp_imm,
  aarch64_op_ccmp_reg,
  aarch64_op_cinc_csinc,
  aarch64_op_cinv_csinv,
  aarch64_op_clrex,
  aarch64_op_cls_advsimd,
  aarch64_op_cls_int,
  aarch64_op_clz_advsimd,
  aarch64_op_clz_int,
  aarch64_op_cmeq_advsimd_reg,
  aarch64_op_cmeq_advsimd_zero,
  aarch64_op_cmge_advsimd_reg,
  aarch64_op_cmge_advsimd_zero,
  aarch64_op_cmgt_advsimd_reg,
  aarch64_op_cmgt_advsimd_zero,
  aarch64_op_cmhi_advsimd,
  aarch64_op_cmhs_advsimd,
  aarch64_op_cmle_advsimd,
  aarch64_op_cmlt_advsimd,
  aarch64_op_cmn_adds_addsub_ext,
  aarch64_op_cmn_adds_addsub_imm,
  aarch64_op_cmn_adds_addsub_shift,
  aarch64_op_cmp_subs_addsub_ext,
  aarch64_op_cmp_subs_addsub_imm,
  aarch64_op_cmp_subs_addsub_shift,
  aarch64_op_cmtst_advsimd,
  aarch64_op_cneg_csneg,
  aarch64_op_cnt_advsimd,
  aarch64_op_crc32,
  aarch64_op_crc32c,
  aarch64_op_csel,
  aarch64_op_cset_csinc,
  aarch64_op_csetm_csinv,
  aarch64_op_csinc,
  aarch64_op_csinv,
  aarch64_op_csneg,
  aarch64_op_dc_sys,
  aarch64_op_dcps1,
  aarch64_op_dcps2,
  aarch64_op_dcps3,
  aarch64_op_dmb,
  aarch64_op_drps,
  aarch64_op_dsb,
  aarch64_op_dup_advsimd_elt,
  aarch64_op_dup_advsimd_gen,
  aarch64_op_eon,
  aarch64_op_eor_advsimd,
  aarch64_op_eor_log_imm,
  aarch64_op_eor_log_shift,
  aarch64_op_eret,
  aarch64_op_ext_advsimd,
  aarch64_op_extr,
  aarch64_op_fabd_advsimd,
  aarch64_op_fabs_advsimd,
  aarch64_op_fabs_float,
  aarch64_op_facge_advsimd,
  aarch64_op_facgt_advsimd,
  aarch64_op_fadd_advsimd,
  aarch64_op_fadd_float,
  aarch64_op_faddp_advsimd_pair,
  aarch64_op_faddp_advsimd_vec,
  aarch64_op_fccmp_float,
  aarch64_op_fccmpe_float,
  aarch64_op_fcmeq_advsimd_reg,
  aarch64_op_fcmeq_advsimd_zero,
  aarch64_op_fcmge_advsimd_reg,
  aarch64_op_fcmge_advsimd_zero,
  aarch64_op_fcmgt_advsimd_reg,
  aarch64_op_fcmgt_advsimd_zero,
  aarch64_op_fcmle_advsimd,
  aarch64_op_fcmlt_advsimd,
  aarch64_op_fcmp_float,
  aarch64_op_fcmpe_float,
  aarch64_op_fcsel_float,
  aarch64_op_fcvt_float,
  aarch64_op_fcvtas_advsimd,
  aarch64_op_fcvtas_float,
  aarch64_op_fcvtau_advsimd,
  aarch64_op_fcvtau_float,
  aarch64_op_fcvtl_advsimd,
  aarch64_op_fcvtms_advsimd,
  aarch64_op_fcvtms_float,
  aarch64_op_fcvtmu_advsimd,
  aarch64_op_fcvtmu_float,
  aarch64_op_fcvtn_advsimd,
  aarch64_op_fcvtns_advsimd,
  aarch64_op_fcvtns_float,
  aarch64_op_fcvtnu_advsimd,
  aarch64_op_fcvtnu_float,
  aarch64_op_fcvtps_advsimd,
  aarch64_op_fcvtps_float,
  aarch64_op_fcvtpu_advsimd,
  aarch64_op_fcvtpu_float,
  aarch64_op_fcvtxn_advsimd,
  aarch64_op_fcvtzs_advsimd_fix,
  aarch64_op_fcvtzs_advsimd_int,
  aarch64_op_fcvtzs_float_fix,
  aarch64_op_fcvtzs_float_int,
  aarch64_op_fcvtzu_advsimd_fix,
  aarch64_op_fcvtzu_advsimd_int,
  aarch64_op_fcvtzu_float_fix,
  aarch64_op_fcvtzu_float_int,
  aarch64_op_fdiv_advsimd,
  aarch64_op_fdiv_float,
  aarch64_op_fmadd_float,
  aarch64_op_fmax_advsimd,
  aarch64_op_fmax_float,
  aarch64_op_fmaxnm_advsimd,
  aarch64_op_fmaxnm_float,
  aarch64_op_fmaxnmp_advsimd_pair,
  aarch64_op_fmaxnmp_advsimd_vec,
  aarch64_op_fmaxnmv_advsimd,
  aarch64_op_fmaxp_advsimd_pair,
  aarch64_op_fmaxp_advsimd_vec,
  aarch64_op_fmaxv_advsimd,
  aarch64_op_fmin_advsimd,
  aarch64_op_fmin_float,
  aarch64_op_fminnm_advsimd,
  aarch64_op_fminnm_float,
  aarch64_op_fminnmp_advsimd_pair,
  aarch64_op_fminnmp_advsimd_vec,
  aarch64_op_fminnmv_advsimd,
  aarch64_op_fminp_advsimd_pair,
  aarch64_op_fminp_advsimd_vec,
  aarch64_op_fminv_advsimd,
  aarch64_op_fmla_advsimd_elt,
  aarch64_op_fmla_advsimd_vec,
  aarch64_op_fmls_advsimd_elt,
  aarch64_op_fmls_advsimd_vec,
  aarch64_op_fmov_advsimd,
  aarch64_op_fmov_float,
  aarch64_op_fmov_float_gen,
  aarch64_op_fmov_float_imm,
  aarch64_op_fmsub_float,
  aarch64_op_fmul_advsimd_elt,
  aarch64_op_fmul_advsimd_vec,
  aarch64_op_fmul_float,
  aarch64_op_fmulx_advsimd_elt,
  aarch64_op_fmulx_advsimd_vec,
  aarch64_op_fneg_advsimd,
  aarch64_op_fneg_float,
  aarch64_op_fnmadd_float,
  aarch64_op_fnmsub_float,
  aarch64_op_fnmul_float,
  aarch64_op_frecpe_advsimd,
  aarch64_op_frecps_advsimd,
  aarch64_op_frecpx_advsimd,
  aarch64_op_frinta_advsimd,
  aarch64_op_frinta_float,
  aarch64_op_frinti_advsimd,
  aarch64_op_frinti_float,
  aarch64_op_frintm_advsimd,
  aarch64_op_frintm_float,
  aarch64_op_frintn_advsimd,
  aarch64_op_frintn_float,
  aarch64_op_frintp_advsimd,
  aarch64_op_frintp_float,
  aarch64_op_frintx_advsimd,
  aarch64_op_frintx_float,
  aarch64_op_frintz_advsimd,
  aarch64_op_frintz_float,
  aarch64_op_frsqrte_advsimd,
  aarch64_op_frsqrts_advsimd,
  aarch64_op_fsqrt_advsimd,
  aarch64_op_fsqrt_float,
  aarch64_op_fsub_advsimd,
  aarch64_op_fsub_float,
  aarch64_op_hint,
  aarch64_op_hlt,
  aarch64_op_hvc,
  aarch64_op_ic_sys,
  aarch64_op_ins_advsimd_elt,
  aarch64_op_ins_advsimd_gen,
  aarch64_op_isb,
  aarch64_op_ld1_advsimd_mult,
  aarch64_op_ld1_advsimd_sngl,
  aarch64_op_ld1r_advsimd,
  aarch64_op_ld2_advsimd_mult,
  aarch64_op_ld2_advsimd_sngl,
  aarch64_op_ld2r_advsimd,
  aarch64_op_ld3_advsimd_mult,
  aarch64_op_ld3_advsimd_sngl,
  aarch64_op_ld3r_advsimd,
  aarch64_op_ld4_advsimd_mult,
  aarch64_op_ld4_advsimd_sngl,
  aarch64_op_ld4r_advsimd,
  aarch64_op_ldar,
  aarch64_op_ldarb,
  aarch64_op_ldarh,
  aarch64_op_ldaxp,
  aarch64_op_ldaxr,
  aarch64_op_ldaxrb,
  aarch64_op_ldaxrh,
  aarch64_op_ldnp_fpsimd,
  aarch64_op_ldnp_gen,
  aarch64_op_ldp_fpsimd,
  aarch64_op_ldp_gen,
  aarch64_op_ldpsw,
  aarch64_op_ldr_imm_fpsimd,
  aarch64_op_ldr_imm_gen,
  aarch64_op_ldr_lit_fpsimd,
  aarch64_op_ldr_lit_gen,
  aarch64_op_ldr_reg_fpsimd,
  aarch64_op_ldr_reg_gen,
  aarch64_op_ldrb_imm,
  aarch64_op_ldrb_reg,
  aarch64_op_ldrh_imm,
  aarch64_op_ldrh_reg,
  aarch64_op_ldrsb_imm,
  aarch64_op_ldrsb_reg,
  aarch64_op_ldrsh_imm,
  aarch64_op_ldrsh_reg,
  aarch64_op_ldrsw_imm,
  aarch64_op_ldrsw_lit,
  aarch64_op_ldrsw_reg,
  aarch64_op_ldtr,
  aarch64_op_ldtrb,
  aarch64_op_ldtrh,
  aarch64_op_ldtrsb,
  aarch64_op_ldtrsh,
  aarch64_op_ldtrsw,
  aarch64_op_ldur_fpsimd,
  aarch64_op_ldur_gen,
  aarch64_op_ldurb,
  aarch64_op_ldurh,
  aarch64_op_ldursb,
  aarch64_op_ldursh,
  aarch64_op_ldursw,
  aarch64_op_ldxp,
  aarch64_op_ldxr,
  aarch64_op_ldxrb,
  aarch64_op_ldxrh,
  aarch64_op_lsl_lslv,
  aarch64_op_lsl_ubfm,
  aarch64_op_lslv,
  aarch64_op_lsr_lsrv,
  aarch64_op_lsr_ubfm,
  aarch64_op_lsrv,
  aarch64_op_madd,
  aarch64_op_mla_advsimd_elt,
  aarch64_op_mla_advsimd_vec,
  aarch64_op_mls_advsimd_elt,
  aarch64_op_mls_advsimd_vec,
  aarch64_op_mneg_msub,
  aarch64_op_mov_add_addsub_imm,
  aarch64_op_mov_dup_advsimd_elt,
  aarch64_op_mov_ins_advsimd_elt,
  aarch64_op_mov_ins_advsimd_gen,
  aarch64_op_mov_movn,
  aarch64_op_mov_movz,
  aarch64_op_mov_orr_advsimd_reg,
  aarch64_op_mov_orr_log_imm,
  aarch64_op_mov_orr_log_shift,
  aarch64_op_mov_umov_advsimd,
  aarch64_op_movi_advsimd,
  aarch64_op_movk,
  aarch64_op_movn,
  aarch64_op_movz,
  aarch64_op_mrs,
  aarch64_op_msr_imm,
  aarch64_op_msr_reg,
  aarch64_op_msub,
  aarch64_op_mul_advsimd_elt,
  aarch64_op_mul_advsimd_vec,
  aarch64_op_mul_madd,
  aarch64_op_mvn_not_advsimd,
  aarch64_op_mvn_orn_log_shift,
  aarch64_op_mvni_advsimd,
  aarch64_op_neg_advsimd,
  aarch64_op_neg_sub_addsub_shift,
  aarch64_op_negs_subs_addsub_shift,
  aarch64_op_ngc_sbc,
  aarch64_op_ngcs_sbcs,
  aarch64_op_nop_hint,
  aarch64_op_not_advsimd,
  aarch64_op_orn_advsimd,
  aarch64_op_orn_log_shift,
  aarch64_op_orr_advsimd_imm,
  aarch64_op_orr_advsimd_reg,
  aarch64_op_orr_log_imm,
  aarch64_op_orr_log_shift,
  aarch64_op_pmul_advsimd,
  aarch64_op_pmull_advsimd,
  aarch64_op_prfm_imm,
  aarch64_op_prfm_lit,
  aarch64_op_prfm_reg,
  aarch64_op_prfum,
  aarch64_op_raddhn_advsimd,
  aarch64_op_rbit_advsimd,
  aarch64_op_rbit_int,
  aarch64_op_ret,
  aarch64_op_rev,
  aarch64_op_rev16_advsimd,
  aarch64_op_rev16_int,
  aarch64_op_rev32_advsimd,
  aarch64_op_rev32_int,
  aarch64_op_rev64_advsimd,
  aarch64_op_ror_extr,
  aarch64_op_ror_rorv,
  aarch64_op_rorv,
  aarch64_op_rshrn_advsimd,
  aarch64_op_rsubhn_advsimd,
  aarch64_op_saba_advsimd,
  aarch64_op_sabal_advsimd,
  aarch64_op_sabd_advsimd,
  aarch64_op_sabdl_advsimd,
  aarch64_op_sadalp_advsimd,
  aarch64_op_saddl_advsimd,
  aarch64_op_saddlp_advsimd,
  aarch64_op_saddlv_advsimd,
  aarch64_op_saddw_advsimd,
  aarch64_op_sbc,
  aarch64_op_sbcs,
  aarch64_op_sbfiz_sbfm,
  aarch64_op_sbfm,
  aarch64_op_sbfx_sbfm,
  aarch64_op_scvtf_advsimd_fix,
  aarch64_op_scvtf_advsimd_int,
  aarch64_op_scvtf_float_fix,
  aarch64_op_scvtf_float_int,
  aarch64_op_sdiv,
  aarch64_op_sev_hint,
  aarch64_op_sevl_hint,
  aarch64_op_sha1c_advsimd,
  aarch64_op_sha1h_advsimd,
  aarch64_op_sha1m_advsimd,
  aarch64_op_sha1p_advsimd,
  aarch64_op_sha1su0_advsimd,
  aarch64_op_sha1su1_advsimd,
  aarch64_op_sha256h2_advsimd,
  aarch64_op_sha256h_advsimd,
  aarch64_op_sha256su0_advsimd,
  aarch64_op_sha256su1_advsimd,
  aarch64_op_shadd_advsimd,
  aarch64_op_shl_advsimd,
  aarch64_op_shll_advsimd,
  aarch64_op_shrn_advsimd,
  aarch64_op_shsub_advsimd,
  aarch64_op_sli_advsimd,
  aarch64_op_smaddl,
  aarch64_op_smax_advsimd,
  aarch64_op_smaxp_advsimd,
  aarch64_op_smaxv_advsimd,
  aarch64_op_smc,
  aarch64_op_smin_advsimd,
  aarch64_op_sminp_advsimd,
  aarch64_op_sminv_advsimd,
  aarch64_op_smlal_advsimd_elt,
  aarch64_op_smlal_advsimd_vec,
  aarch64_op_smlsl_advsimd_elt,
  aarch64_op_smlsl_advsimd_vec,
  aarch64_op_smnegl_smsubl,
  aarch64_op_smov_advsimd,
  aarch64_op_smsubl,
  aarch64_op_smulh,
  aarch64_op_smull_advsimd_elt,
  aarch64_op_smull_advsimd_vec,
  aarch64_op_smull_smaddl,
  aarch64_op_sqabs_advsimd,
  aarch64_op_sqadd_advsimd,
  aarch64_op_sqdmlal_advsimd_elt,
  aarch64_op_sqdmlal_advsimd_vec,
  aarch64_op_sqdmlsl_advsimd_elt,
  aarch64_op_sqdmlsl_advsimd_vec,
  aarch64_op_sqdmulh_advsimd_elt,
  aarch64_op_sqdmulh_advsimd_vec,
  aarch64_op_sqdmull_advsimd_elt,
  aarch64_op_sqdmull_advsimd_vec,
  aarch64_op_sqneg_advsimd,
  aarch64_op_sqrdmulh_advsimd_elt,
  aarch64_op_sqrdmulh_advsimd_vec,
  aarch64_op_sqrshl_advsimd,
  aarch64_op_sqrshrn_advsimd,
  aarch64_op_sqrshrun_advsimd,
  aarch64_op_sqshl_advsimd_imm,
  aarch64_op_sqshl_advsimd_reg,
  aarch64_op_sqshlu_advsimd,
  aarch64_op_sqshrn_advsimd,
  aarch64_op_sqshrun_advsimd,
  aarch64_op_sqsub_advsimd,
  aarch64_op_sqxtn_advsimd,
  aarch64_op_sqxtun_advsimd,
  aarch64_op_srhadd_advsimd,
  aarch64_op_sri_advsimd,
  aarch64_op_srshl_advsimd,
  aarch64_op_srshr_advsimd,
  aarch64_op_srsra_advsimd,
  aarch64_op_sshl_advsimd,
  aarch64_op_sshll_advsimd,
  aarch64_op_sshr_advsimd,
  aarch64_op_ssra_advsimd,
  aarch64_op_ssubl_advsimd,
  aarch64_op_ssubw_advsimd,
  aarch64_op_st1_advsimd_mult,
  aarch64_op_st1_advsimd_sngl,
  aarch64_op_st2_advsimd_mult,
  aarch64_op_st2_advsimd_sngl,
  aarch64_op_st3_advsimd_mult,
  aarch64_op_st3_advsimd_sngl,
  aarch64_op_st4_advsimd_mult,
  aarch64_op_st4_advsimd_sngl,
  aarch64_op_stlr,
  aarch64_op_stlrb,
  aarch64_op_stlrh,
  aarch64_op_stlxp,
  aarch64_op_stlxr,
  aarch64_op_stlxrb,
  aarch64_op_stlxrh,
  aarch64_op_stnp_fpsimd,
  aarch64_op_stnp_gen,
  aarch64_op_stp_fpsimd,
  aarch64_op_stp_gen,
  aarch64_op_str_imm_fpsimd,
  aarch64_op_str_imm_gen,
  aarch64_op_str_reg_fpsimd,
  aarch64_op_str_reg_gen,
  aarch64_op_strb_imm,
  aarch64_op_strb_reg,
  aarch64_op_strh_imm,
  aarch64_op_strh_reg,
  aarch64_op_sttr,
  aarch64_op_sttrb,
  aarch64_op_sttrh,
  aarch64_op_stur_fpsimd,
  aarch64_op_stur_gen,
  aarch64_op_sturb,
  aarch64_op_sturh,
  aarch64_op_stxp,
  aarch64_op_stxr,
  aarch64_op_stxrb,
  aarch64_op_stxrh,
  aarch64_op_sub_addsub_ext,
  aarch64_op_sub_addsub_imm,
  aarch64_op_sub_addsub_shift,
  aarch64_op_sub_advsimd,
  aarch64_op_subhn_advsimd,
  aarch64_op_subs_addsub_ext,
  aarch64_op_subs_addsub_imm,
  aarch64_op_subs_addsub_shift,
  aarch64_op_suqadd_advsimd,
  aarch64_op_svc,
  aarch64_op_sxtb_sbfm,
  aarch64_op_sxth_sbfm,
  aarch64_op_sxtl_sshll_advsimd,
  aarch64_op_sxtw_sbfm,
  aarch64_op_sys,
  aarch64_op_sysl,
  aarch64_op_tbl_advsimd,
  aarch64_op_tbnz,
  aarch64_op_tbx_advsimd,
  aarch64_op_tbz,
  aarch64_op_tlbi_sys,
  aarch64_op_trn1_advsimd,
  aarch64_op_trn2_advsimd,
  aarch64_op_tst_ands_log_imm,
  aarch64_op_tst_ands_log_shift,
  aarch64_op_uaba_advsimd,
  aarch64_op_uabal_advsimd,
  aarch64_op_uabd_advsimd,
  aarch64_op_uabdl_advsimd,
  aarch64_op_uadalp_advsimd,
  aarch64_op_uaddl_advsimd,
  aarch64_op_uaddlp_advsimd,
  aarch64_op_uaddlv_advsimd,
  aarch64_op_uaddw_advsimd,
  aarch64_op_ubfiz_ubfm,
  aarch64_op_ubfm,
  aarch64_op_ubfx_ubfm,
  aarch64_op_ucvtf_advsimd_fix,
  aarch64_op_ucvtf_advsimd_int,
  aarch64_op_ucvtf_float_fix,
  aarch64_op_ucvtf_float_int,
  aarch64_op_udiv,
  aarch64_op_uhadd_advsimd,
  aarch64_op_uhsub_advsimd,
  aarch64_op_umaddl,
  aarch64_op_umax_advsimd,
  aarch64_op_umaxp_advsimd,
  aarch64_op_umaxv_advsimd,
  aarch64_op_umin_advsimd,
  aarch64_op_uminp_advsimd,
  aarch64_op_uminv_advsimd,
  aarch64_op_umlal_advsimd_elt,
  aarch64_op_umlal_advsimd_vec,
  aarch64_op_umlsl_advsimd_elt,
  aarch64_op_umlsl_advsimd_vec,
  aarch64_op_umnegl_umsubl,
  aarch64_op_umov_advsimd,
  aarch64_op_umsubl,
  aarch64_op_umulh,
  aarch64_op_umull_advsimd_elt,
  aarch64_op_umull_advsimd_vec,
  aarch64_op_umull_umaddl,
  aarch64_op_uqadd_advsimd,
  aarch64_op_uqrshl_advsimd,
  aarch64_op_uqrshrn_advsimd,
  aarch64_op_uqshl_advsimd_imm,
  aarch64_op_uqshl_advsimd_reg,
  aarch64_op_uqshrn_advsimd,
  aarch64_op_uqsub_advsimd,
  aarch64_op_uqxtn_advsimd,
  aarch64_op_urecpe_advsimd,
  aarch64_op_urhadd_advsimd,
  aarch64_op_urshl_advsimd,
  aarch64_op_urshr_advsimd,
  aarch64_op_ursqrte_advsimd,
  aarch64_op_ursra_advsimd,
  aarch64_op_ushl_advsimd,
  aarch64_op_ushll_advsimd,
  aarch64_op_ushr_advsimd,
  aarch64_op_usqadd_advsimd,
  aarch64_op_usra_advsimd,
  aarch64_op_usubl_advsimd,
  aarch64_op_usubw_advsimd,
  aarch64_op_uxtb_ubfm,
  aarch64_op_uxth_ubfm,
  aarch64_op_uxtl_ushll_advsimd,
  aarch64_op_uzp1_advsimd,
  aarch64_op_uzp2_advsimd,
  aarch64_op_wfe_hint,
  aarch64_op_wfi_hint,
  aarch64_op_xtn_advsimd,
  aarch64_op_yield_hint,
  aarch64_op_zip1_advsimd,
  aarch64_op_zip2_advsimd,
}
number of instructions:  574
0            unallocated    0b11000000000000000000000000000 ( 0x18000000 )
1            abs_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01011110001000001011100000000000 ( 0x5e20b800 ) [('size',), ('Rn',), ('Rd',)]
2            abs_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000001011100000000000 ( 0xe20b800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
3                    adc 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010000000000000000000000000 ( 0x1a000000 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
4                   adcs 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00111010000000000000000000000000 ( 0x3a000000 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
5         add_addsub_ext 	01111111111000000000000000000000 ( 0x7fe00000 ) 	00001011001000000000000000000000 ( 0xb200000 ) [('sf',), ('Rm',), ('option', [15, 13]), ('imm', [12, 10]), ('Rn',), ('Rd',)]
6         add_addsub_imm 	01111111000000000000000000000000 ( 0x7f000000 ) 	00010001000000000000000000000000 ( 0x11000000 ) [('sf',), ('shift',), ('imm', [21, 10]), ('Rn',), ('Rd',)]
7       add_addsub_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00001011000000000000000000000000 ( 0xb000000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
8            add_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000001000010000000000 ( 0x5e208400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
9            add_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001000010000000000 ( 0xe208400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
10          addhn_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000100000000000000 ( 0xe204000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
11      addp_advsimd_pair 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01011110001100011011100000000000 ( 0x5e31b800 ) [('size',), ('Rn',), ('Rd',)]
12       addp_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001011110000000000 ( 0xe20bc00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
13        adds_addsub_ext 	01111111111000000000000000000000 ( 0x7fe00000 ) 	00101011001000000000000000000000 ( 0x2b200000 ) [('sf',), ('Rm',), ('option', [15, 13]), ('imm', [12, 10]), ('Rn',), ('Rd',)]
14        adds_addsub_imm 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110001000000000000000000000000 ( 0x31000000 ) [('sf',), ('shift',), ('imm', [21, 10]), ('Rn',), ('Rd',)]
15      adds_addsub_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00101011000000000000000000000000 ( 0x2b000000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
16           addv_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001100011011100000000000 ( 0xe31b800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
17                    adr 	10011111000000000000000000000000 ( 0x9f000000 ) 	00010000000000000000000000000000 ( 0x10000000 ) [('imm', [30, 29]), ('imm', [23, 5]), ('Rd',)]
18                   adrp 	10011111000000000000000000000000 ( 0x9f000000 ) 	10010000000000000000000000000000 ( 0x90000000 ) [('imm', [30, 29]), ('imm', [23, 5]), ('Rd',)]
19           aesd_advsimd 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01001110001010000101100000000000 ( 0x4e285800 ) [('Rn',), ('Rd',)]
20           aese_advsimd 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01001110001010000100100000000000 ( 0x4e284800 ) [('Rn',), ('Rd',)]
21         aesimc_advsimd 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01001110001010000111100000000000 ( 0x4e287800 ) [('Rn',), ('Rd',)]
22          aesmc_advsimd 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01001110001010000110100000000000 ( 0x4e286800 ) [('Rn',), ('Rd',)]
23            and_advsimd 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110001000000001110000000000 ( 0xe201c00 ) [('Q',), ('Rm',), ('Rn',), ('Rd',)]
24            and_log_imm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010010000000000000000000000000 ( 0x12000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
25          and_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00001010000000000000000000000000 ( 0xa000000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
26           ands_log_imm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01110010000000000000000000000000 ( 0x72000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
27         ands_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	01101010000000000000000000000000 ( 0x6a000000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
28               asr_asrv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010100000000000 ( 0x1ac02800 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
29               asr_sbfm 	01111111100000000111110000000000 ( 0x7f807c00 ) 	00010011000000000111110000000000 ( 0x13007c00 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('Rn',), ('Rd',)]
30                   asrv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010100000000000 ( 0x1ac02800 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
31                 at_sys 	11111111111110001111111100000000 ( 0xfff8ff00 ) 	11010101000010000111100000000000 ( 0xd5087800 ) [('op1',), ('op2',), ('Rt',)]
32                 b_cond 	11111111000000000000000000010000 ( 0xff000010 ) 	01010100000000000000000000000000 ( 0x54000000 ) [('imm', [23, 5]), ('cond', [3, 0])]
33               b_uncond 	11111100000000000000000000000000 ( 0xfc000000 ) 	00010100000000000000000000000000 ( 0x14000000 ) [('imm', [25, 0])]
34                bfi_bfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00110011000000000000000000000000 ( 0x33000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
35                    bfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00110011000000000000000000000000 ( 0x33000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
36              bfxil_bfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00110011000000000000000000000000 ( 0x33000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
37        bic_advsimd_imm 	10111111111110000001110000000000 ( 0xbff81c00 ) 	00101111000000000001010000000000 ( 0x2f001400 ) [('Q',), ('a',), ('b',), ('c',), ('d',), ('e',), ('f',), ('g',), ('h',), ('Rd',)]
38        bic_advsimd_reg 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110011000000001110000000000 ( 0xe601c00 ) [('Q',), ('Rm',), ('Rn',), ('Rd',)]
39          bic_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00001010001000000000000000000000 ( 0xa200000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
40                   bics 	01111111001000000000000000000000 ( 0x7f200000 ) 	01101010001000000000000000000000 ( 0x6a200000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
41            bif_advsimd 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00101110111000000001110000000000 ( 0x2ee01c00 ) [('Q',), ('Rm',), ('Rn',), ('Rd',)]
42            bit_advsimd 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00101110101000000001110000000000 ( 0x2ea01c00 ) [('Q',), ('Rm',), ('Rn',), ('Rd',)]
43                     bl 	11111100000000000000000000000000 ( 0xfc000000 ) 	10010100000000000000000000000000 ( 0x94000000 ) [('imm', [25, 0])]
44                    blr 	11111111111111111111110000011111 ( 0xfffffc1f ) 	11010110001111110000000000000000 ( 0xd63f0000 ) [('Rn',)]
45                     br 	11111111111111111111110000011111 ( 0xfffffc1f ) 	11010110000111110000000000000000 ( 0xd61f0000 ) [('Rn',)]
46                    brk 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100001000000000000000000000 ( 0xd4200000 ) [('imm', [20, 5])]
47            bsl_advsimd 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00101110011000000001110000000000 ( 0x2e601c00 ) [('Q',), ('Rm',), ('Rn',), ('Rd',)]
48                   cbnz 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110101000000000000000000000000 ( 0x35000000 ) [('sf',), ('imm', [23, 5]), ('Rt',)]
49                    cbz 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110100000000000000000000000000 ( 0x34000000 ) [('sf',), ('imm', [23, 5]), ('Rt',)]
50               ccmn_imm 	01111111111000000000110000010000 ( 0x7fe00c10 ) 	00111010010000000000100000000000 ( 0x3a400800 ) [('sf',), ('imm', [20, 16]), ('cond', [15, 12]), ('Rn',), ('nzcv',)]
51               ccmn_reg 	01111111111000000000110000010000 ( 0x7fe00c10 ) 	00111010010000000000000000000000 ( 0x3a400000 ) [('sf',), ('Rm',), ('cond', [15, 12]), ('Rn',), ('nzcv',)]
52               ccmp_imm 	01111111111000000000110000010000 ( 0x7fe00c10 ) 	01111010010000000000100000000000 ( 0x7a400800 ) [('sf',), ('imm', [20, 16]), ('cond', [15, 12]), ('Rn',), ('nzcv',)]
53               ccmp_reg 	01111111111000000000110000010000 ( 0x7fe00c10 ) 	01111010010000000000000000000000 ( 0x7a400000 ) [('sf',), ('Rm',), ('cond', [15, 12]), ('Rn',), ('nzcv',)]
54             cinc_csinc 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	00011010100000000000010000000000 ( 0x1a800400 ) [('sf',), ('Rd',)]
55             cinv_csinv 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	01011010100000000000000000000000 ( 0x5a800000 ) [('sf',), ('Rd',)]
56                  clrex 	11111111111111111111000011111111 ( 0xfffff0ff ) 	11010101000000110011000001011111 ( 0xd503305f ) [('CRm',)]
57            cls_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000000100100000000000 ( 0xe204800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
58                cls_int 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	01011010110000000001010000000000 ( 0x5ac01400 ) [('sf',), ('Rn',), ('Rd',)]
59            clz_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000000100100000000000 ( 0x2e204800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
60                clz_int 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	01011010110000000001000000000000 ( 0x5ac01000 ) [('sf',), ('Rn',), ('Rd',)]
61       cmeq_advsimd_reg 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000001000110000000000 ( 0x7e208c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
62       cmeq_advsimd_reg 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001000110000000000 ( 0x2e208c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
63      cmeq_advsimd_zero 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01011110001000001001100000000000 ( 0x5e209800 ) [('size',), ('Rn',), ('Rd',)]
64      cmeq_advsimd_zero 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000001001100000000000 ( 0xe209800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
65       cmge_advsimd_reg 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000000011110000000000 ( 0x5e203c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
66       cmge_advsimd_reg 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000011110000000000 ( 0xe203c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
67      cmge_advsimd_zero 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01111110001000001000100000000000 ( 0x7e208800 ) [('size',), ('Rn',), ('Rd',)]
68      cmge_advsimd_zero 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000001000100000000000 ( 0x2e208800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
69       cmgt_advsimd_reg 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000000011010000000000 ( 0x5e203400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
70       cmgt_advsimd_reg 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000011010000000000 ( 0xe203400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
71      cmgt_advsimd_zero 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01011110001000001000100000000000 ( 0x5e208800 ) [('size',), ('Rn',), ('Rd',)]
72      cmgt_advsimd_zero 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000001000100000000000 ( 0xe208800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
73           cmhi_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000000011010000000000 ( 0x7e203400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
74           cmhi_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000011010000000000 ( 0x2e203400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
75           cmhs_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000000011110000000000 ( 0x7e203c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
76           cmhs_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000011110000000000 ( 0x2e203c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
77           cmle_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01111110001000001001100000000000 ( 0x7e209800 ) [('size',), ('Rn',), ('Rd',)]
78           cmle_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000001001100000000000 ( 0x2e209800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
79           cmlt_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01011110001000001010100000000000 ( 0x5e20a800 ) [('size',), ('Rn',), ('Rd',)]
80           cmlt_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000001010100000000000 ( 0xe20a800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
81    cmn_adds_addsub_ext 	01111111111000000000000000011111 ( 0x7fe0001f ) 	00101011001000000000000000011111 ( 0x2b20001f ) [('sf',), ('Rm',), ('option', [15, 13]), ('imm', [12, 10]), ('Rn',)]
82    cmn_adds_addsub_imm 	01111111000000000000000000011111 ( 0x7f00001f ) 	00110001000000000000000000011111 ( 0x3100001f ) [('sf',), ('shift',), ('imm', [21, 10]), ('Rn',)]
83  cmn_adds_addsub_shift 	01111111001000000000000000011111 ( 0x7f20001f ) 	00101011000000000000000000011111 ( 0x2b00001f ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',)]
84    cmp_subs_addsub_ext 	01111111111000000000000000011111 ( 0x7fe0001f ) 	01101011001000000000000000011111 ( 0x6b20001f ) [('sf',), ('Rm',), ('option', [15, 13]), ('imm', [12, 10]), ('Rn',)]
85    cmp_subs_addsub_imm 	01111111000000000000000000011111 ( 0x7f00001f ) 	01110001000000000000000000011111 ( 0x7100001f ) [('sf',), ('shift',), ('imm', [21, 10]), ('Rn',)]
86  cmp_subs_addsub_shift 	01111111001000000000000000011111 ( 0x7f20001f ) 	01101011000000000000000000011111 ( 0x6b00001f ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',)]
87          cmtst_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000001000110000000000 ( 0x5e208c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
88          cmtst_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001000110000000000 ( 0xe208c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
89             cneg_csneg 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	01011010100000000000010000000000 ( 0x5a800400 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
90            cnt_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000000101100000000000 ( 0xe205800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
91                  crc32 	01111111111000001111000000000000 ( 0x7fe0f000 ) 	00011010110000000100000000000000 ( 0x1ac04000 ) [('sf',), ('Rm',), ('sz',), ('Rn',), ('Rd',)]
92                 crc32c 	01111111111000001111000000000000 ( 0x7fe0f000 ) 	00011010110000000101000000000000 ( 0x1ac05000 ) [('sf',), ('Rm',), ('sz',), ('Rn',), ('Rd',)]
93                   csel 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	00011010100000000000000000000000 ( 0x1a800000 ) [('sf',), ('Rm',), ('cond', [15, 12]), ('Rn',), ('Rd',)]
94             cset_csinc 	01111111111111110000111111100000 ( 0x7fff0fe0 ) 	00011010100111110000011111100000 ( 0x1a9f07e0 ) [('sf',), ('Rd',)]
95            csetm_csinv 	01111111111111110000111111100000 ( 0x7fff0fe0 ) 	01011010100111110000001111100000 ( 0x5a9f03e0 ) [('sf',), ('Rd',)]
96                  csinc 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	00011010100000000000010000000000 ( 0x1a800400 ) [('sf',), ('Rm',), ('cond', [15, 12]), ('Rn',), ('Rd',)]
97                  csinv 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	01011010100000000000000000000000 ( 0x5a800000 ) [('sf',), ('Rm',), ('cond', [15, 12]), ('Rn',), ('Rd',)]
98                  csneg 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	01011010100000000000010000000000 ( 0x5a800400 ) [('sf',), ('Rm',), ('cond', [15, 12]), ('Rn',), ('Rd',)]
99                 dc_sys 	11111111111110001111000000000000 ( 0xfff8f000 ) 	11010101000010000111000000000000 ( 0xd5087000 ) [('op1',), ('CRm',), ('op2',), ('Rt',)]
100                  dcps1 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100101000000000000000000001 ( 0xd4a00001 ) [('imm', [20, 5])]
101                  dcps2 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100101000000000000000000010 ( 0xd4a00002 ) [('imm', [20, 5])]
102                  dcps3 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100101000000000000000000011 ( 0xd4a00003 ) [('imm', [20, 5])]
103                    dmb 	11111111111111111111000011111111 ( 0xfffff0ff ) 	11010101000000110011000010111111 ( 0xd50330bf ) [('CRm',)]
104                   drps 	11111111111111111111111111111111 ( 0xffffffff ) 	11010110101111110000001111100000 ( 0xd6bf03e0 ) []
105                    dsb 	11111111111111111111000011111111 ( 0xfffff0ff ) 	11010101000000110011000010011111 ( 0xd503309f ) [('CRm',)]
106        dup_advsimd_elt 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01011110000000000000010000000000 ( 0x5e000400 ) [('imm', [20, 16]), ('Rn',), ('Rd',)]
107        dup_advsimd_elt 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110000000000000010000000000 ( 0xe000400 ) [('Q',), ('imm', [20, 16]), ('Rn',), ('Rd',)]
108        dup_advsimd_gen 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110000000000000110000000000 ( 0xe000c00 ) [('Q',), ('imm', [20, 16]), ('Rn',), ('Rd',)]
109                    eon 	01111111001000000000000000000000 ( 0x7f200000 ) 	01001010001000000000000000000000 ( 0x4a200000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
110            eor_advsimd 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00101110001000000001110000000000 ( 0x2e201c00 ) [('Q',), ('Rm',), ('Rn',), ('Rd',)]
111            eor_log_imm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010010000000000000000000000000 ( 0x52000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
112          eor_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	01001010000000000000000000000000 ( 0x4a000000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
113                   eret 	11111111111111111111111111111111 ( 0xffffffff ) 	11010110100111110000001111100000 ( 0xd69f03e0 ) []
114            ext_advsimd 	10111111111000001000010000000000 ( 0xbfe08400 ) 	00101110000000000000000000000000 ( 0x2e000000 ) [('Q',), ('Rm',), ('imm', [14, 11]), ('Rn',), ('Rd',)]
115                   extr 	01111111101000000000000000000000 ( 0x7fa00000 ) 	00010011100000000000000000000000 ( 0x13800000 ) [('sf',), ('N', [22, 22]), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
116           fabd_advsimd 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	01111110101000001101010000000000 ( 0x7ea0d400 ) [('sz',), ('Rm',), ('Rn',), ('Rd',)]
117           fabd_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110101000001101010000000000 ( 0x2ea0d400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
118           fabs_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000001111100000000000 ( 0xea0f800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
119             fabs_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001000001100000000000000 ( 0x1e20c000 ) [('Rn',), ('Rd',)]
120          facge_advsimd 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	01111110001000001110110000000000 ( 0x7e20ec00 ) [('sz',), ('Rm',), ('Rn',), ('Rd',)]
121          facge_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110001000001110110000000000 ( 0x2e20ec00 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
122          facgt_advsimd 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	01111110101000001110110000000000 ( 0x7ea0ec00 ) [('sz',), ('Rm',), ('Rn',), ('Rd',)]
123          facgt_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110101000001110110000000000 ( 0x2ea0ec00 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
124           fadd_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110001000001101010000000000 ( 0xe20d400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
125             fadd_float 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	00011110001000000010100000000000 ( 0x1e202800 ) [('Rm',), ('Rn',), ('Rd',)]
126     faddp_advsimd_pair 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110001100001101100000000000 ( 0x7e30d800 ) [('sz',), ('Rn',), ('Rd',)]
127      faddp_advsimd_vec 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110001000001101010000000000 ( 0x2e20d400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
128            fccmp_float 	11111111101000000000110000010000 ( 0xffa00c10 ) 	00011110001000000000010000000000 ( 0x1e200400 ) [('Rm',), ('cond', [15, 12]), ('Rn',), ('nzcv',)]
129           fccmpe_float 	11111111101000000000110000010000 ( 0xffa00c10 ) 	00011110001000000000010000010000 ( 0x1e200410 ) [('Rm',), ('cond', [15, 12]), ('Rn',), ('nzcv',)]
130      fcmeq_advsimd_reg 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	01011110001000001110010000000000 ( 0x5e20e400 ) [('sz',), ('Rm',), ('Rn',), ('Rd',)]
131      fcmeq_advsimd_reg 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110001000001110010000000000 ( 0xe20e400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
132     fcmeq_advsimd_zero 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110101000001101100000000000 ( 0x5ea0d800 ) [('sz',), ('Rn',), ('Rd',)]
133     fcmeq_advsimd_zero 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000001101100000000000 ( 0xea0d800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
134      fcmge_advsimd_reg 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	01111110001000001110010000000000 ( 0x7e20e400 ) [('sz',), ('Rm',), ('Rn',), ('Rd',)]
135      fcmge_advsimd_reg 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110001000001110010000000000 ( 0x2e20e400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
136     fcmge_advsimd_zero 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110101000001100100000000000 ( 0x7ea0c800 ) [('sz',), ('Rn',), ('Rd',)]
137     fcmge_advsimd_zero 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101000001100100000000000 ( 0x2ea0c800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
138      fcmgt_advsimd_reg 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	01111110101000001110010000000000 ( 0x7ea0e400 ) [('sz',), ('Rm',), ('Rn',), ('Rd',)]
139      fcmgt_advsimd_reg 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110101000001110010000000000 ( 0x2ea0e400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
140     fcmgt_advsimd_zero 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110101000001100100000000000 ( 0x5ea0c800 ) [('sz',), ('Rn',), ('Rd',)]
141     fcmgt_advsimd_zero 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000001100100000000000 ( 0xea0c800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
142          fcmle_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110101000001101100000000000 ( 0x7ea0d800 ) [('sz',), ('Rn',), ('Rd',)]
143          fcmle_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101000001101100000000000 ( 0x2ea0d800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
144          fcmlt_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110101000001110100000000000 ( 0x5ea0e800 ) [('sz',), ('Rn',), ('Rd',)]
145          fcmlt_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000001110100000000000 ( 0xea0e800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
146             fcmp_float 	11111111101000001111110000010111 ( 0xffa0fc17 ) 	00011110001000000010000000000000 ( 0x1e202000 ) [('Rm',), ('Rn',)]
147            fcmpe_float 	11111111101000001111110000010111 ( 0xffa0fc17 ) 	00011110001000000010000000010000 ( 0x1e202010 ) [('Rm',), ('Rn',)]
148            fcsel_float 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00011110001000000000110000000000 ( 0x1e200c00 ) [('Rm',), ('cond', [15, 12]), ('Rn',), ('Rd',)]
149             fcvt_float 	11111111001111100111110000000000 ( 0xff3e7c00 ) 	00011110001000100100000000000000 ( 0x1e224000 ) [('type',), ('opc',), ('Rn',), ('Rd',)]
150         fcvtas_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110001000011100100000000000 ( 0x5e21c800 ) [('sz',), ('Rn',), ('Rd',)]
151         fcvtas_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110001000011100100000000000 ( 0xe21c800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
152           fcvtas_float 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001001000000000000000000 ( 0x1e240000 ) [('sf',), ('Rn',), ('Rd',)]
153         fcvtau_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110001000011100100000000000 ( 0x7e21c800 ) [('sz',), ('Rn',), ('Rd',)]
154         fcvtau_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110001000011100100000000000 ( 0x2e21c800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
155           fcvtau_float 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001001010000000000000000 ( 0x1e250000 ) [('sf',), ('Rn',), ('Rd',)]
156          fcvtl_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110001000010111100000000000 ( 0xe217800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
157         fcvtms_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110001000011011100000000000 ( 0x5e21b800 ) [('sz',), ('Rn',), ('Rd',)]
158         fcvtms_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110001000011011100000000000 ( 0xe21b800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
159           fcvtms_float 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001100000000000000000000 ( 0x1e300000 ) [('sf',), ('Rn',), ('Rd',)]
160         fcvtmu_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110001000011011100000000000 ( 0x7e21b800 ) [('sz',), ('Rn',), ('Rd',)]
161         fcvtmu_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110001000011011100000000000 ( 0x2e21b800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
162           fcvtmu_float 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001100010000000000000000 ( 0x1e310000 ) [('sf',), ('Rn',), ('Rd',)]
163          fcvtn_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110001000010110100000000000 ( 0xe216800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
164         fcvtns_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110001000011010100000000000 ( 0x5e21a800 ) [('sz',), ('Rn',), ('Rd',)]
165         fcvtns_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110001000011010100000000000 ( 0xe21a800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
166           fcvtns_float 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001000000000000000000000 ( 0x1e200000 ) [('sf',), ('Rn',), ('Rd',)]
167         fcvtnu_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110001000011010100000000000 ( 0x7e21a800 ) [('sz',), ('Rn',), ('Rd',)]
168         fcvtnu_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110001000011010100000000000 ( 0x2e21a800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
169           fcvtnu_float 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001000010000000000000000 ( 0x1e210000 ) [('sf',), ('Rn',), ('Rd',)]
170         fcvtps_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110101000011010100000000000 ( 0x5ea1a800 ) [('sz',), ('Rn',), ('Rd',)]
171         fcvtps_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000011010100000000000 ( 0xea1a800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
172           fcvtps_float 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001010000000000000000000 ( 0x1e280000 ) [('sf',), ('Rn',), ('Rd',)]
173         fcvtpu_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110101000011010100000000000 ( 0x7ea1a800 ) [('sz',), ('Rn',), ('Rd',)]
174         fcvtpu_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101000011010100000000000 ( 0x2ea1a800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
175           fcvtpu_float 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001010010000000000000000 ( 0x1e290000 ) [('sf',), ('Rn',), ('Rd',)]
176         fcvtxn_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110001000010110100000000000 ( 0x7e216800 ) [('sz',), ('Rn',), ('Rd',)]
177         fcvtxn_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110001000010110100000000000 ( 0x2e216800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
178     fcvtzs_advsimd_fix 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000001111110000000000 ( 0x5f00fc00 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
179     fcvtzs_advsimd_fix 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000001111110000000000 ( 0xf00fc00 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
180     fcvtzs_advsimd_int 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110101000011011100000000000 ( 0x5ea1b800 ) [('sz',), ('Rn',), ('Rd',)]
181     fcvtzs_advsimd_int 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000011011100000000000 ( 0xea1b800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
182       fcvtzs_float_fix 	01111111101111110000000000000000 ( 0x7fbf0000 ) 	00011110000110000000000000000000 ( 0x1e180000 ) [('sf',), ('scale',), ('Rn',), ('Rd',)]
183       fcvtzs_float_int 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001110000000000000000000 ( 0x1e380000 ) [('sf',), ('Rn',), ('Rd',)]
184     fcvtzu_advsimd_fix 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000001111110000000000 ( 0x7f00fc00 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
185     fcvtzu_advsimd_fix 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000001111110000000000 ( 0x2f00fc00 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
186     fcvtzu_advsimd_int 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110101000011011100000000000 ( 0x7ea1b800 ) [('sz',), ('Rn',), ('Rd',)]
187     fcvtzu_advsimd_int 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101000011011100000000000 ( 0x2ea1b800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
188       fcvtzu_float_fix 	01111111101111110000000000000000 ( 0x7fbf0000 ) 	00011110000110010000000000000000 ( 0x1e190000 ) [('sf',), ('scale',), ('Rn',), ('Rd',)]
189       fcvtzu_float_int 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001110010000000000000000 ( 0x1e390000 ) [('sf',), ('Rn',), ('Rd',)]
190           fdiv_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110001000001111110000000000 ( 0x2e20fc00 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
191             fdiv_float 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	00011110001000000001100000000000 ( 0x1e201800 ) [('Rm',), ('Rn',), ('Rd',)]
192            fmadd_float 	11111111101000001000000000000000 ( 0xffa08000 ) 	00011111000000000000000000000000 ( 0x1f000000 ) [('Rm',), ('Ra',), ('Rn',), ('Rd',)]
193           fmax_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110001000001111010000000000 ( 0xe20f400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
194             fmax_float 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	00011110001000000100100000000000 ( 0x1e204800 ) [('Rm',), ('Rn',), ('Rd',)]
195         fmaxnm_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110001000001100010000000000 ( 0xe20c400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
196           fmaxnm_float 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	00011110001000000110100000000000 ( 0x1e206800 ) [('Rm',), ('Rn',), ('Rd',)]
197   fmaxnmp_advsimd_pair 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110001100001100100000000000 ( 0x7e30c800 ) [('sz',), ('Rn',), ('Rd',)]
198    fmaxnmp_advsimd_vec 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110001000001100010000000000 ( 0x2e20c400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
199        fmaxnmv_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110001100001100100000000000 ( 0x2e30c800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
200     fmaxp_advsimd_pair 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110001100001111100000000000 ( 0x7e30f800 ) [('sz',), ('Rn',), ('Rd',)]
201      fmaxp_advsimd_vec 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110001000001111010000000000 ( 0x2e20f400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
202          fmaxv_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110001100001111100000000000 ( 0x2e30f800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
203           fmin_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110101000001111010000000000 ( 0xea0f400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
204             fmin_float 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	00011110001000000101100000000000 ( 0x1e205800 ) [('Rm',), ('Rn',), ('Rd',)]
205         fminnm_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110101000001100010000000000 ( 0xea0c400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
206           fminnm_float 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	00011110001000000111100000000000 ( 0x1e207800 ) [('Rm',), ('Rn',), ('Rd',)]
207   fminnmp_advsimd_pair 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110101100001100100000000000 ( 0x7eb0c800 ) [('sz',), ('Rn',), ('Rd',)]
208    fminnmp_advsimd_vec 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110101000001100010000000000 ( 0x2ea0c400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
209        fminnmv_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101100001100100000000000 ( 0x2eb0c800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
210     fminp_advsimd_pair 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110101100001111100000000000 ( 0x7eb0f800 ) [('sz',), ('Rn',), ('Rd',)]
211      fminp_advsimd_vec 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110101000001111010000000000 ( 0x2ea0f400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
212          fminv_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101100001111100000000000 ( 0x2eb0f800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
213       fmla_advsimd_elt 	11111111100000001111010000000000 ( 0xff80f400 ) 	01011111100000000001000000000000 ( 0x5f801000 ) [('sz',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
214       fmla_advsimd_elt 	10111111100000001111010000000000 ( 0xbf80f400 ) 	00001111100000000001000000000000 ( 0xf801000 ) [('Q',), ('sz',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
215       fmla_advsimd_vec 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110001000001100110000000000 ( 0xe20cc00 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
216       fmls_advsimd_elt 	11111111100000001111010000000000 ( 0xff80f400 ) 	01011111100000000101000000000000 ( 0x5f805000 ) [('sz',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
217       fmls_advsimd_elt 	10111111100000001111010000000000 ( 0xbf80f400 ) 	00001111100000000101000000000000 ( 0xf805000 ) [('Q',), ('sz',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
218       fmls_advsimd_vec 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110101000001100110000000000 ( 0xea0cc00 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
219           fmov_advsimd 	10011111111110001111110000000000 ( 0x9ff8fc00 ) 	00001111000000001111010000000000 ( 0xf00f400 ) [('Q',), ('op',), ('a',), ('b',), ('c',), ('d',), ('e',), ('f',), ('g',), ('h',), ('Rd',)]
220             fmov_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001000000100000000000000 ( 0x1e204000 ) [('Rn',), ('Rd',)]
221         fmov_float_gen 	01111111001101101111110000000000 ( 0x7f36fc00 ) 	00011110001001100000000000000000 ( 0x1e260000 ) [('sf',), ('type',), ('Rn',), ('Rd',)]
222         fmov_float_imm 	11111111101000000001111111100000 ( 0xffa01fe0 ) 	00011110001000000001000000000000 ( 0x1e201000 ) [('imm', [20, 13]), ('Rd',)]
223            fmsub_float 	11111111101000001000000000000000 ( 0xffa08000 ) 	00011111000000001000000000000000 ( 0x1f008000 ) [('Rm',), ('Ra',), ('Rn',), ('Rd',)]
224       fmul_advsimd_elt 	11111111100000001111010000000000 ( 0xff80f400 ) 	01011111100000001001000000000000 ( 0x5f809000 ) [('sz',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
225       fmul_advsimd_elt 	10111111100000001111010000000000 ( 0xbf80f400 ) 	00001111100000001001000000000000 ( 0xf809000 ) [('Q',), ('sz',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
226       fmul_advsimd_vec 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00101110001000001101110000000000 ( 0x2e20dc00 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
227             fmul_float 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	00011110001000000000100000000000 ( 0x1e200800 ) [('Rm',), ('Rn',), ('Rd',)]
228      fmulx_advsimd_elt 	11111111100000001111010000000000 ( 0xff80f400 ) 	01111111100000001001000000000000 ( 0x7f809000 ) [('sz',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
229      fmulx_advsimd_elt 	10111111100000001111010000000000 ( 0xbf80f400 ) 	00101111100000001001000000000000 ( 0x2f809000 ) [('Q',), ('sz',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
230      fmulx_advsimd_vec 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	01011110001000001101110000000000 ( 0x5e20dc00 ) [('sz',), ('Rm',), ('Rn',), ('Rd',)]
231      fmulx_advsimd_vec 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110001000001101110000000000 ( 0xe20dc00 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
232           fneg_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101000001111100000000000 ( 0x2ea0f800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
233             fneg_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001000010100000000000000 ( 0x1e214000 ) [('Rn',), ('Rd',)]
234           fnmadd_float 	11111111101000001000000000000000 ( 0xffa08000 ) 	00011111001000000000000000000000 ( 0x1f200000 ) [('Rm',), ('Ra',), ('Rn',), ('Rd',)]
235           fnmsub_float 	11111111101000001000000000000000 ( 0xffa08000 ) 	00011111001000001000000000000000 ( 0x1f208000 ) [('Rm',), ('Ra',), ('Rn',), ('Rd',)]
236            fnmul_float 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	00011110001000001000100000000000 ( 0x1e208800 ) [('Rm',), ('Rn',), ('Rd',)]
237         frecpe_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110101000011101100000000000 ( 0x5ea1d800 ) [('sz',), ('Rn',), ('Rd',)]
238         frecpe_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000011101100000000000 ( 0xea1d800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
239         frecps_advsimd 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	01011110001000001111110000000000 ( 0x5e20fc00 ) [('sz',), ('Rm',), ('Rn',), ('Rd',)]
240         frecps_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110001000001111110000000000 ( 0xe20fc00 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
241         frecpx_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110101000011111100000000000 ( 0x5ea1f800 ) [('sz',), ('Rn',), ('Rd',)]
242         frinta_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110001000011000100000000000 ( 0x2e218800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
243           frinta_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001001100100000000000000 ( 0x1e264000 ) [('Rn',), ('Rd',)]
244         frinti_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101000011001100000000000 ( 0x2ea19800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
245           frinti_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001001111100000000000000 ( 0x1e27c000 ) [('Rn',), ('Rd',)]
246         frintm_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110001000011001100000000000 ( 0xe219800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
247           frintm_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001001010100000000000000 ( 0x1e254000 ) [('Rn',), ('Rd',)]
248         frintn_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110001000011000100000000000 ( 0xe218800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
249           frintn_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001001000100000000000000 ( 0x1e244000 ) [('Rn',), ('Rd',)]
250         frintp_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000011000100000000000 ( 0xea18800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
251           frintp_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001001001100000000000000 ( 0x1e24c000 ) [('Rn',), ('Rd',)]
252         frintx_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110001000011001100000000000 ( 0x2e219800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
253           frintx_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001001110100000000000000 ( 0x1e274000 ) [('Rn',), ('Rd',)]
254         frintz_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000011001100000000000 ( 0xea19800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
255           frintz_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001001011100000000000000 ( 0x1e25c000 ) [('Rn',), ('Rd',)]
256        frsqrte_advsimd 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110101000011101100000000000 ( 0x7ea1d800 ) [('sz',), ('Rn',), ('Rd',)]
257        frsqrte_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101000011101100000000000 ( 0x2ea1d800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
258        frsqrts_advsimd 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	01011110101000001111110000000000 ( 0x5ea0fc00 ) [('sz',), ('Rm',), ('Rn',), ('Rd',)]
259        frsqrts_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110101000001111110000000000 ( 0xea0fc00 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
260          fsqrt_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101000011111100000000000 ( 0x2ea1f800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
261            fsqrt_float 	11111111101111111111110000000000 ( 0xffbffc00 ) 	00011110001000011100000000000000 ( 0x1e21c000 ) [('Rn',), ('Rd',)]
262           fsub_advsimd 	10111111101000001111110000000000 ( 0xbfa0fc00 ) 	00001110101000001101010000000000 ( 0xea0d400 ) [('Q',), ('sz',), ('Rm',), ('Rn',), ('Rd',)]
263             fsub_float 	11111111101000001111110000000000 ( 0xffa0fc00 ) 	00011110001000000011100000000000 ( 0x1e203800 ) [('Rm',), ('Rn',), ('Rd',)]
264                   hint 	11111111111111111111000000011111 ( 0xfffff01f ) 	11010101000000110010000000011111 ( 0xd503201f ) [('CRm',), ('op2',)]
265                    hlt 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100010000000000000000000000 ( 0xd4400000 ) [('imm', [20, 5])]
266                    hvc 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100000000000000000000000010 ( 0xd4000002 ) [('imm', [20, 5])]
267                 ic_sys 	11111111111110001111000000000000 ( 0xfff8f000 ) 	11010101000010000111000000000000 ( 0xd5087000 ) [('op1',), ('CRm',), ('op2',), ('Rt',)]
268        ins_advsimd_elt 	11111111111000001000010000000000 ( 0xffe08400 ) 	01101110000000000000010000000000 ( 0x6e000400 ) [('imm', [20, 16]), ('imm', [14, 11]), ('Rn',), ('Rd',)]
269        ins_advsimd_gen 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01001110000000000001110000000000 ( 0x4e001c00 ) [('imm', [20, 16]), ('Rn',), ('Rd',)]
270                    isb 	11111111111111111111000011111111 ( 0xfffff0ff ) 	11010101000000110011000011011111 ( 0xd50330df ) [('CRm',)]
271       ld1_advsimd_mult 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001100010000000010000000000000 ( 0xc402000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
272       ld1_advsimd_mult 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001100110000000010000000000000 ( 0xcc02000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
273       ld1_advsimd_sngl 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001101010000000000000000000000 ( 0xd400000 ) [('Q',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
274       ld1_advsimd_sngl 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001101110000000000000000000000 ( 0xdc00000 ) [('Q',), ('Rm',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
275           ld1r_advsimd 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001101010000001100000000000000 ( 0xd40c000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
276           ld1r_advsimd 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001101110000001100000000000000 ( 0xdc0c000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
277       ld2_advsimd_mult 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001100010000001000000000000000 ( 0xc408000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
278       ld2_advsimd_mult 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001100110000001000000000000000 ( 0xcc08000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
279       ld2_advsimd_sngl 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001101011000000000000000000000 ( 0xd600000 ) [('Q',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
280       ld2_advsimd_sngl 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001101111000000000000000000000 ( 0xde00000 ) [('Q',), ('Rm',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
281           ld2r_advsimd 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001101011000001100000000000000 ( 0xd60c000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
282           ld2r_advsimd 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001101111000001100000000000000 ( 0xde0c000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
283       ld3_advsimd_mult 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001100010000000100000000000000 ( 0xc404000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
284       ld3_advsimd_mult 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001100110000000100000000000000 ( 0xcc04000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
285       ld3_advsimd_sngl 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001101010000000010000000000000 ( 0xd402000 ) [('Q',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
286       ld3_advsimd_sngl 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001101110000000010000000000000 ( 0xdc02000 ) [('Q',), ('Rm',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
287           ld3r_advsimd 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001101010000001110000000000000 ( 0xd40e000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
288           ld3r_advsimd 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001101110000001110000000000000 ( 0xdc0e000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
289       ld4_advsimd_mult 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001100010000000000000000000000 ( 0xc400000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
290       ld4_advsimd_mult 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001100110000000000000000000000 ( 0xcc00000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
291       ld4_advsimd_sngl 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001101011000000010000000000000 ( 0xd602000 ) [('Q',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
292       ld4_advsimd_sngl 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001101111000000010000000000000 ( 0xde02000 ) [('Q',), ('Rm',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
293           ld4r_advsimd 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001101011000001110000000000000 ( 0xd60e000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
294           ld4r_advsimd 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001101111000001110000000000000 ( 0xde0e000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
295                   ldar 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000110000001000000000000000 ( 0x88c08000 ) [('Rn',), ('Rt',)]
296                  ldarb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000110000001000000000000000 ( 0x8c08000 ) [('Rn',), ('Rt',)]
297                  ldarh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000110000001000000000000000 ( 0x48c08000 ) [('Rn',), ('Rt',)]
298                  ldaxp 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000011000001000000000000000 ( 0x88608000 ) [('sz',), ('Rt2',), ('Rn',), ('Rt',)]
299                  ldaxr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000010000001000000000000000 ( 0x88408000 ) [('Rn',), ('Rt',)]
300                 ldaxrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000010000001000000000000000 ( 0x8408000 ) [('Rn',), ('Rt',)]
301                 ldaxrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000010000001000000000000000 ( 0x48408000 ) [('Rn',), ('Rt',)]
302            ldnp_fpsimd 	00111111110000000000000000000000 ( 0x3fc00000 ) 	00101100010000000000000000000000 ( 0x2c400000 ) [('opc',), ('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
303               ldnp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101000010000000000000000000000 ( 0x28400000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
304             ldp_fpsimd 	00111111110000000000000000000000 ( 0x3fc00000 ) 	00101100110000000000000000000000 ( 0x2cc00000 ) [('opc',), ('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
305             ldp_fpsimd 	00111111110000000000000000000000 ( 0x3fc00000 ) 	00101101110000000000000000000000 ( 0x2dc00000 ) [('opc',), ('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
306             ldp_fpsimd 	00111111110000000000000000000000 ( 0x3fc00000 ) 	00101101010000000000000000000000 ( 0x2d400000 ) [('opc',), ('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
307                ldp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101000110000000000000000000000 ( 0x28c00000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
308                ldp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101001110000000000000000000000 ( 0x29c00000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
309                ldp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101001010000000000000000000000 ( 0x29400000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
310                  ldpsw 	11111111110000000000000000000000 ( 0xffc00000 ) 	01101000110000000000000000000000 ( 0x68c00000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
311                  ldpsw 	11111111110000000000000000000000 ( 0xffc00000 ) 	01101001110000000000000000000000 ( 0x69c00000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
312                  ldpsw 	11111111110000000000000000000000 ( 0xffc00000 ) 	01101001010000000000000000000000 ( 0x69400000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
313         ldr_imm_fpsimd 	00111111011000000000110000000000 ( 0x3f600c00 ) 	00111100010000000000010000000000 ( 0x3c400400 ) [('size',), ('imm', [20, 12]), ('Rn',), ('Rt',)]
314         ldr_imm_fpsimd 	00111111011000000000110000000000 ( 0x3f600c00 ) 	00111100010000000000110000000000 ( 0x3c400c00 ) [('size',), ('imm', [20, 12]), ('Rn',), ('Rt',)]
315         ldr_imm_fpsimd 	00111111010000000000000000000000 ( 0x3f400000 ) 	00111101010000000000000000000000 ( 0x3d400000 ) [('size',), ('imm', [21, 10]), ('Rn',), ('Rt',)]
316            ldr_imm_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000010000000000010000000000 ( 0xb8400400 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
317            ldr_imm_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000010000000000110000000000 ( 0xb8400c00 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
318            ldr_imm_gen 	10111111110000000000000000000000 ( 0xbfc00000 ) 	10111001010000000000000000000000 ( 0xb9400000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
319         ldr_lit_fpsimd 	00111111000000000000000000000000 ( 0x3f000000 ) 	00011100000000000000000000000000 ( 0x1c000000 ) [('opc',), ('imm', [23, 5]), ('Rt',)]
320            ldr_lit_gen 	10111111000000000000000000000000 ( 0xbf000000 ) 	00011000000000000000000000000000 ( 0x18000000 ) [('imm', [23, 5]), ('Rt',)]
321         ldr_reg_fpsimd 	00111111011000000000110000000000 ( 0x3f600c00 ) 	00111100011000000000100000000000 ( 0x3c600800 ) [('size',), ('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
322            ldr_reg_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000011000000000100000000000 ( 0xb8600800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
323               ldrb_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000010000000000010000000000 ( 0x38400400 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
324               ldrb_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000010000000000110000000000 ( 0x38400c00 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
325               ldrb_imm 	11111111110000000000000000000000 ( 0xffc00000 ) 	00111001010000000000000000000000 ( 0x39400000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
326               ldrb_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000011000000000100000000000 ( 0x38600800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
327               ldrh_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000010000000000010000000000 ( 0x78400400 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
328               ldrh_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000010000000000110000000000 ( 0x78400c00 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
329               ldrh_imm 	11111111110000000000000000000000 ( 0xffc00000 ) 	01111001010000000000000000000000 ( 0x79400000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
330               ldrh_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000011000000000100000000000 ( 0x78600800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
331              ldrsb_imm 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00111000100000000000010000000000 ( 0x38800400 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
332              ldrsb_imm 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00111000100000000000110000000000 ( 0x38800c00 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
333              ldrsb_imm 	11111111100000000000000000000000 ( 0xff800000 ) 	00111001100000000000000000000000 ( 0x39800000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
334              ldrsb_reg 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00111000101000000000100000000000 ( 0x38a00800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
335              ldrsh_imm 	11111111101000000000110000000000 ( 0xffa00c00 ) 	01111000100000000000010000000000 ( 0x78800400 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
336              ldrsh_imm 	11111111101000000000110000000000 ( 0xffa00c00 ) 	01111000100000000000110000000000 ( 0x78800c00 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
337              ldrsh_imm 	11111111100000000000000000000000 ( 0xff800000 ) 	01111001100000000000000000000000 ( 0x79800000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
338              ldrsh_reg 	11111111101000000000110000000000 ( 0xffa00c00 ) 	01111000101000000000100000000000 ( 0x78a00800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
339              ldrsw_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	10111000100000000000010000000000 ( 0xb8800400 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
340              ldrsw_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	10111000100000000000110000000000 ( 0xb8800c00 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
341              ldrsw_imm 	11111111110000000000000000000000 ( 0xffc00000 ) 	10111001100000000000000000000000 ( 0xb9800000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
342              ldrsw_lit 	11111111000000000000000000000000 ( 0xff000000 ) 	10011000000000000000000000000000 ( 0x98000000 ) [('imm', [23, 5]), ('Rt',)]
343              ldrsw_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	10111000101000000000100000000000 ( 0xb8a00800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
344                   ldtr 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000010000000000100000000000 ( 0xb8400800 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
345                  ldtrb 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000010000000000100000000000 ( 0x38400800 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
346                  ldtrh 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000010000000000100000000000 ( 0x78400800 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
347                 ldtrsb 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00111000100000000000100000000000 ( 0x38800800 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
348                 ldtrsh 	11111111101000000000110000000000 ( 0xffa00c00 ) 	01111000100000000000100000000000 ( 0x78800800 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
349                 ldtrsw 	11111111111000000000110000000000 ( 0xffe00c00 ) 	10111000100000000000100000000000 ( 0xb8800800 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
350            ldur_fpsimd 	00111111011000000000110000000000 ( 0x3f600c00 ) 	00111100010000000000000000000000 ( 0x3c400000 ) [('size',), ('imm', [20, 12]), ('Rn',), ('Rt',)]
351               ldur_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000010000000000000000000000 ( 0xb8400000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
352                  ldurb 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000010000000000000000000000 ( 0x38400000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
353                  ldurh 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000010000000000000000000000 ( 0x78400000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
354                 ldursb 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00111000100000000000000000000000 ( 0x38800000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
355                 ldursh 	11111111101000000000110000000000 ( 0xffa00c00 ) 	01111000100000000000000000000000 ( 0x78800000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
356                 ldursw 	11111111111000000000110000000000 ( 0xffe00c00 ) 	10111000100000000000000000000000 ( 0xb8800000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
357                   ldxp 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000011000000000000000000000 ( 0x88600000 ) [('sz',), ('Rt2',), ('Rn',), ('Rt',)]
358                   ldxr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000010000000000000000000000 ( 0x88400000 ) [('Rn',), ('Rt',)]
359                  ldxrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000010000000000000000000000 ( 0x8400000 ) [('Rn',), ('Rt',)]
360                  ldxrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000010000000000000000000000 ( 0x48400000 ) [('Rn',), ('Rt',)]
361               lsl_lslv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010000000000000 ( 0x1ac02000 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
362               lsl_ubfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010011000000000000000000000000 ( 0x53000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('Rn',), ('Rd',)]
363                   lslv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010000000000000 ( 0x1ac02000 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
364               lsr_lsrv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010010000000000 ( 0x1ac02400 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
365               lsr_ubfm 	01111111100000000111110000000000 ( 0x7f807c00 ) 	01010011000000000111110000000000 ( 0x53007c00 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('Rn',), ('Rd',)]
366                   lsrv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010010000000000 ( 0x1ac02400 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
367                   madd 	01111111111000001000000000000000 ( 0x7fe08000 ) 	00011011000000000000000000000000 ( 0x1b000000 ) [('sf',), ('Rm',), ('Ra',), ('Rn',), ('Rd',)]
368        mla_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00101111000000000000000000000000 ( 0x2f000000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
369        mla_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001001010000000000 ( 0xe209400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
370        mls_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00101111000000000100000000000000 ( 0x2f004000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
371        mls_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001001010000000000 ( 0x2e209400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
372              mneg_msub 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011011000000001111110000000000 ( 0x1b00fc00 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
373     mov_add_addsub_imm 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	00010001000000000000000000000000 ( 0x11000000 ) [('sf',), ('Rn',), ('Rd',)]
374    mov_dup_advsimd_elt 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01011110000000000000010000000000 ( 0x5e000400 ) [('imm', [20, 16]), ('Rn',), ('Rd',)]
375    mov_ins_advsimd_elt 	11111111111000001000010000000000 ( 0xffe08400 ) 	01101110000000000000010000000000 ( 0x6e000400 ) [('imm', [20, 16]), ('imm', [14, 11]), ('Rn',), ('Rd',)]
376    mov_ins_advsimd_gen 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01001110000000000001110000000000 ( 0x4e001c00 ) [('imm', [20, 16]), ('Rn',), ('Rd',)]
377               mov_movn 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010010100000000000000000000000 ( 0x12800000 ) [('sf',), ('hw',), ('imm', [20, 5]), ('Rd',)]
378               mov_movz 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010010100000000000000000000000 ( 0x52800000 ) [('sf',), ('hw',), ('imm', [20, 5]), ('Rd',)]
379    mov_orr_advsimd_reg 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110101000000001110000000000 ( 0xea01c00 ) [('Q',), ('Rm',), ('Rn',), ('Rd',)]
380        mov_orr_log_imm 	01111111100000000000001111100000 ( 0x7f8003e0 ) 	00110010000000000000001111100000 ( 0x320003e0 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rd',)]
381      mov_orr_log_shift 	01111111111000001111111111100000 ( 0x7fe0ffe0 ) 	00101010000000000000001111100000 ( 0x2a0003e0 ) [('sf',), ('Rm',), ('Rd',)]
382       mov_umov_advsimd 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110000000000011110000000000 ( 0xe003c00 ) [('Q',), ('imm', [20, 16]), ('Rn',), ('Rd',)]
383           movi_advsimd 	10011111111110000000110000000000 ( 0x9ff80c00 ) 	00001111000000000000010000000000 ( 0xf000400 ) [('Q',), ('op',), ('a',), ('b',), ('c',), ('cmode',), ('d',), ('e',), ('f',), ('g',), ('h',), ('Rd',)]
384                   movk 	01111111100000000000000000000000 ( 0x7f800000 ) 	01110010100000000000000000000000 ( 0x72800000 ) [('sf',), ('hw',), ('imm', [20, 5]), ('Rd',)]
385                   movn 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010010100000000000000000000000 ( 0x12800000 ) [('sf',), ('hw',), ('imm', [20, 5]), ('Rd',)]
386                   movz 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010010100000000000000000000000 ( 0x52800000 ) [('sf',), ('hw',), ('imm', [20, 5]), ('Rd',)]
387                    mrs 	11111111111100000000000000000000 ( 0xfff00000 ) 	11010101001100000000000000000000 ( 0xd5300000 ) [('o0',), ('op1',), ('CRn',), ('CRm',), ('op2',), ('Rt',)]
388                msr_imm 	11111111111110001111000000011111 ( 0xfff8f01f ) 	11010101000000000100000000011111 ( 0xd500401f ) [('op1',), ('CRm',), ('op2',)]
389                msr_reg 	11111111111100000000000000000000 ( 0xfff00000 ) 	11010101000100000000000000000000 ( 0xd5100000 ) [('o0',), ('op1',), ('CRn',), ('CRm',), ('op2',), ('Rt',)]
390                   msub 	01111111111000001000000000000000 ( 0x7fe08000 ) 	00011011000000001000000000000000 ( 0x1b008000 ) [('sf',), ('Rm',), ('Ra',), ('Rn',), ('Rd',)]
391        mul_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00001111000000001000000000000000 ( 0xf008000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
392        mul_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001001110000000000 ( 0xe209c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
393               mul_madd 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011011000000000111110000000000 ( 0x1b007c00 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
394        mvn_not_advsimd 	10111111111111111111110000000000 ( 0xbffffc00 ) 	00101110001000000101100000000000 ( 0x2e205800 ) [('Q',), ('Rn',), ('Rd',)]
395      mvn_orn_log_shift 	01111111001000000000001111100000 ( 0x7f2003e0 ) 	00101010001000000000001111100000 ( 0x2a2003e0 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rd',)]
396           mvni_advsimd 	10111111111110000000110000000000 ( 0xbff80c00 ) 	00101111000000000000010000000000 ( 0x2f000400 ) [('Q',), ('a',), ('b',), ('c',), ('cmode',), ('d',), ('e',), ('f',), ('g',), ('h',), ('Rd',)]
397            neg_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01111110001000001011100000000000 ( 0x7e20b800 ) [('size',), ('Rn',), ('Rd',)]
398            neg_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000001011100000000000 ( 0x2e20b800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
399   neg_sub_addsub_shift 	01111111001000000000001111100000 ( 0x7f2003e0 ) 	01001011000000000000001111100000 ( 0x4b0003e0 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rd',)]
400 negs_subs_addsub_shift 	01111111001000000000001111100000 ( 0x7f2003e0 ) 	01101011000000000000001111100000 ( 0x6b0003e0 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rd',)]
401                ngc_sbc 	01111111111000001111111111100000 ( 0x7fe0ffe0 ) 	01011010000000000000001111100000 ( 0x5a0003e0 ) [('sf',), ('Rm',), ('Rd',)]
402              ngcs_sbcs 	01111111111000001111111111100000 ( 0x7fe0ffe0 ) 	01111010000000000000001111100000 ( 0x7a0003e0 ) [('sf',), ('Rm',), ('Rd',)]
403               nop_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000000011111 ( 0xd503201f ) []
404            not_advsimd 	10111111111111111111110000000000 ( 0xbffffc00 ) 	00101110001000000101100000000000 ( 0x2e205800 ) [('Q',), ('Rn',), ('Rd',)]
405            orn_advsimd 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110111000000001110000000000 ( 0xee01c00 ) [('Q',), ('Rm',), ('Rn',), ('Rd',)]
406          orn_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00101010001000000000000000000000 ( 0x2a200000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
407        orr_advsimd_imm 	10111111111110000001110000000000 ( 0xbff81c00 ) 	00001111000000000001010000000000 ( 0xf001400 ) [('Q',), ('a',), ('b',), ('c',), ('d',), ('e',), ('f',), ('g',), ('h',), ('Rd',)]
408        orr_advsimd_reg 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110101000000001110000000000 ( 0xea01c00 ) [('Q',), ('Rm',), ('Rn',), ('Rd',)]
409            orr_log_imm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00110010000000000000000000000000 ( 0x32000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
410          orr_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00101010000000000000000000000000 ( 0x2a000000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
411           pmul_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001001110000000000 ( 0x2e209c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
412          pmull_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001110000000000000 ( 0xe20e000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
413               prfm_imm 	11111111110000000000000000000000 ( 0xffc00000 ) 	11111001100000000000000000000000 ( 0xf9800000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
414               prfm_lit 	11111111000000000000000000000000 ( 0xff000000 ) 	11011000000000000000000000000000 ( 0xd8000000 ) [('imm', [23, 5]), ('Rt',)]
415               prfm_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	11111000101000000000100000000000 ( 0xf8a00800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
416                  prfum 	11111111111000000000110000000000 ( 0xffe00c00 ) 	11111000100000000000000000000000 ( 0xf8800000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
417         raddhn_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000100000000000000 ( 0x2e204000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
418           rbit_advsimd 	10111111111111111111110000000000 ( 0xbffffc00 ) 	00101110011000000101100000000000 ( 0x2e605800 ) [('Q',), ('Rn',), ('Rd',)]
419               rbit_int 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	01011010110000000000000000000000 ( 0x5ac00000 ) [('sf',), ('Rn',), ('Rd',)]
420                    ret 	11111111111111111111110000011111 ( 0xfffffc1f ) 	11010110010111110000000000000000 ( 0xd65f0000 ) [('Rn',)]
421                    rev 	01111111111111111111100000000000 ( 0x7ffff800 ) 	01011010110000000000100000000000 ( 0x5ac00800 ) [('sf',), ('Rn',), ('Rd',)]
422          rev16_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000000001100000000000 ( 0xe201800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
423              rev16_int 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	01011010110000000000010000000000 ( 0x5ac00400 ) [('sf',), ('Rn',), ('Rd',)]
424          rev32_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000000000100000000000 ( 0x2e200800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
425              rev32_int 	11111111111111111111110000000000 ( 0xfffffc00 ) 	11011010110000000000100000000000 ( 0xdac00800 ) [('Rn',), ('Rd',)]
426          rev64_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000000000100000000000 ( 0xe200800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
427               ror_extr 	01111111101000000000000000000000 ( 0x7fa00000 ) 	00010011100000000000000000000000 ( 0x13800000 ) [('sf',), ('N', [22, 22]), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
428               ror_rorv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010110000000000 ( 0x1ac02c00 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
429                   rorv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010110000000000 ( 0x1ac02c00 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
430          rshrn_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000001000110000000000 ( 0xf008c00 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
431         rsubhn_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000110000000000000 ( 0x2e206000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
432           saba_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000111110000000000 ( 0xe207c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
433          sabal_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000101000000000000 ( 0xe205000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
434           sabd_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000111010000000000 ( 0xe207400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
435          sabdl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000111000000000000 ( 0xe207000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
436         sadalp_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000000110100000000000 ( 0xe206800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
437          saddl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000000000000000000 ( 0xe200000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
438         saddlp_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000000010100000000000 ( 0xe202800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
439         saddlv_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001100000011100000000000 ( 0xe303800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
440          saddw_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000001000000000000 ( 0xe201000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
441                    sbc 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	01011010000000000000000000000000 ( 0x5a000000 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
442                   sbcs 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	01111010000000000000000000000000 ( 0x7a000000 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
443             sbfiz_sbfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010011000000000000000000000000 ( 0x13000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
444                   sbfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010011000000000000000000000000 ( 0x13000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
445              sbfx_sbfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010011000000000000000000000000 ( 0x13000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
446      scvtf_advsimd_fix 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000001110010000000000 ( 0x5f00e400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
447      scvtf_advsimd_fix 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000001110010000000000 ( 0xf00e400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
448      scvtf_advsimd_int 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01011110001000011101100000000000 ( 0x5e21d800 ) [('sz',), ('Rn',), ('Rd',)]
449      scvtf_advsimd_int 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110001000011101100000000000 ( 0xe21d800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
450        scvtf_float_fix 	01111111101111110000000000000000 ( 0x7fbf0000 ) 	00011110000000100000000000000000 ( 0x1e020000 ) [('sf',), ('scale',), ('Rn',), ('Rd',)]
451        scvtf_float_int 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001000100000000000000000 ( 0x1e220000 ) [('sf',), ('Rn',), ('Rd',)]
452                   sdiv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000000110000000000 ( 0x1ac00c00 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
453               sev_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000010011111 ( 0xd503209f ) []
454              sevl_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000010111111 ( 0xd50320bf ) []
455          sha1c_advsimd 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01011110000000000000000000000000 ( 0x5e000000 ) [('Rm',), ('Rn',), ('Rd',)]
456          sha1h_advsimd 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01011110001010000000100000000000 ( 0x5e280800 ) [('Rn',), ('Rd',)]
457          sha1m_advsimd 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01011110000000000010000000000000 ( 0x5e002000 ) [('Rm',), ('Rn',), ('Rd',)]
458          sha1p_advsimd 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01011110000000000001000000000000 ( 0x5e001000 ) [('Rm',), ('Rn',), ('Rd',)]
459        sha1su0_advsimd 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01011110000000000011000000000000 ( 0x5e003000 ) [('Rm',), ('Rn',), ('Rd',)]
460        sha1su1_advsimd 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01011110001010000001100000000000 ( 0x5e281800 ) [('Rn',), ('Rd',)]
461       sha256h2_advsimd 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01011110000000000101000000000000 ( 0x5e005000 ) [('Rm',), ('Rn',), ('Rd',)]
462        sha256h_advsimd 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01011110000000000100000000000000 ( 0x5e004000 ) [('Rm',), ('Rn',), ('Rd',)]
463      sha256su0_advsimd 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01011110001010000010100000000000 ( 0x5e282800 ) [('Rn',), ('Rd',)]
464      sha256su1_advsimd 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	01011110000000000110000000000000 ( 0x5e006000 ) [('Rm',), ('Rn',), ('Rd',)]
465          shadd_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000000010000000000 ( 0xe200400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
466            shl_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000000101010000000000 ( 0x5f005400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
467            shl_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000000101010000000000 ( 0xf005400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
468           shll_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000010011100000000000 ( 0x2e213800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
469           shrn_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000001000010000000000 ( 0xf008400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
470          shsub_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000010010000000000 ( 0xe202400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
471            sli_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000000101010000000000 ( 0x7f005400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
472            sli_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000000101010000000000 ( 0x2f005400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
473                 smaddl 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011001000000000000000000000 ( 0x9b200000 ) [('Rm',), ('Ra',), ('Rn',), ('Rd',)]
474           smax_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000110010000000000 ( 0xe206400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
475          smaxp_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001010010000000000 ( 0xe20a400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
476          smaxv_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001100001010100000000000 ( 0xe30a800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
477                    smc 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100000000000000000000000011 ( 0xd4000003 ) [('imm', [20, 5])]
478           smin_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000110110000000000 ( 0xe206c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
479          sminp_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001010110000000000 ( 0xe20ac00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
480          sminv_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001100011010100000000000 ( 0xe31a800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
481      smlal_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00001111000000000010000000000000 ( 0xf002000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
482      smlal_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001000000000000000 ( 0xe208000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
483      smlsl_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00001111000000000110000000000000 ( 0xf006000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
484      smlsl_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001010000000000000 ( 0xe20a000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
485          smnegl_smsubl 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	10011011001000001111110000000000 ( 0x9b20fc00 ) [('Rm',), ('Rn',), ('Rd',)]
486           smov_advsimd 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110000000000010110000000000 ( 0xe002c00 ) [('Q',), ('imm', [20, 16]), ('Rn',), ('Rd',)]
487                 smsubl 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011001000001000000000000000 ( 0x9b208000 ) [('Rm',), ('Ra',), ('Rn',), ('Rd',)]
488                  smulh 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011010000000000000000000000 ( 0x9b400000 ) [('Rm',), ('Rn',), ('Rd',)]
489      smull_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00001111000000001010000000000000 ( 0xf00a000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
490      smull_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001100000000000000 ( 0xe20c000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
491           smull_smaddl 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	10011011001000000111110000000000 ( 0x9b207c00 ) [('Rm',), ('Rn',), ('Rd',)]
492          sqabs_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01011110001000000111100000000000 ( 0x5e207800 ) [('size',), ('Rn',), ('Rd',)]
493          sqabs_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000000111100000000000 ( 0xe207800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
494          sqadd_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000000000110000000000 ( 0x5e200c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
495          sqadd_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000000110000000000 ( 0xe200c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
496    sqdmlal_advsimd_elt 	11111111000000001111010000000000 ( 0xff00f400 ) 	01011111000000000011000000000000 ( 0x5f003000 ) [('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
497    sqdmlal_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00001111000000000011000000000000 ( 0xf003000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
498    sqdmlal_advsimd_vec 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000001001000000000000 ( 0x5e209000 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
499    sqdmlal_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001001000000000000 ( 0xe209000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
500    sqdmlsl_advsimd_elt 	11111111000000001111010000000000 ( 0xff00f400 ) 	01011111000000000111000000000000 ( 0x5f007000 ) [('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
501    sqdmlsl_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00001111000000000111000000000000 ( 0xf007000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
502    sqdmlsl_advsimd_vec 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000001011000000000000 ( 0x5e20b000 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
503    sqdmlsl_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001011000000000000 ( 0xe20b000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
504    sqdmulh_advsimd_elt 	11111111000000001111010000000000 ( 0xff00f400 ) 	01011111000000001100000000000000 ( 0x5f00c000 ) [('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
505    sqdmulh_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00001111000000001100000000000000 ( 0xf00c000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
506    sqdmulh_advsimd_vec 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000001011010000000000 ( 0x5e20b400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
507    sqdmulh_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001011010000000000 ( 0xe20b400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
508    sqdmull_advsimd_elt 	11111111000000001111010000000000 ( 0xff00f400 ) 	01011111000000001011000000000000 ( 0x5f00b000 ) [('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
509    sqdmull_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00001111000000001011000000000000 ( 0xf00b000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
510    sqdmull_advsimd_vec 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000001101000000000000 ( 0x5e20d000 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
511    sqdmull_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000001101000000000000 ( 0xe20d000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
512          sqneg_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01111110001000000111100000000000 ( 0x7e207800 ) [('size',), ('Rn',), ('Rd',)]
513          sqneg_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000000111100000000000 ( 0x2e207800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
514   sqrdmulh_advsimd_elt 	11111111000000001111010000000000 ( 0xff00f400 ) 	01011111000000001101000000000000 ( 0x5f00d000 ) [('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
515   sqrdmulh_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00001111000000001101000000000000 ( 0xf00d000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
516   sqrdmulh_advsimd_vec 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000001011010000000000 ( 0x7e20b400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
517   sqrdmulh_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001011010000000000 ( 0x2e20b400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
518         sqrshl_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000000101110000000000 ( 0x5e205c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
519         sqrshl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000101110000000000 ( 0xe205c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
520        sqrshrn_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000001001110000000000 ( 0x5f009c00 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
521        sqrshrn_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000001001110000000000 ( 0xf009c00 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
522       sqrshrun_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000001000110000000000 ( 0x7f008c00 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
523       sqrshrun_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000001000110000000000 ( 0x2f008c00 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
524      sqshl_advsimd_imm 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000000111010000000000 ( 0x5f007400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
525      sqshl_advsimd_imm 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000000111010000000000 ( 0xf007400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
526      sqshl_advsimd_reg 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000000100110000000000 ( 0x5e204c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
527      sqshl_advsimd_reg 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000100110000000000 ( 0xe204c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
528         sqshlu_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000000110010000000000 ( 0x7f006400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
529         sqshlu_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000000110010000000000 ( 0x2f006400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
530         sqshrn_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000001001010000000000 ( 0x5f009400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
531         sqshrn_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000001001010000000000 ( 0xf009400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
532        sqshrun_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000001000010000000000 ( 0x7f008400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
533        sqshrun_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000001000010000000000 ( 0x2f008400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
534          sqsub_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000000010110000000000 ( 0x5e202c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
535          sqsub_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000010110000000000 ( 0xe202c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
536          sqxtn_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01011110001000010100100000000000 ( 0x5e214800 ) [('size',), ('Rn',), ('Rd',)]
537          sqxtn_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000010100100000000000 ( 0xe214800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
538         sqxtun_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01111110001000010010100000000000 ( 0x7e212800 ) [('size',), ('Rn',), ('Rd',)]
539         sqxtun_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000010010100000000000 ( 0x2e212800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
540         srhadd_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000001010000000000 ( 0xe201400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
541            sri_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000000100010000000000 ( 0x7f004400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
542            sri_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000000100010000000000 ( 0x2f004400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
543          srshl_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000000101010000000000 ( 0x5e205400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
544          srshl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000101010000000000 ( 0xe205400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
545          srshr_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000000010010000000000 ( 0x5f002400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
546          srshr_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000000010010000000000 ( 0xf002400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
547          srsra_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000000011010000000000 ( 0x5f003400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
548          srsra_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000000011010000000000 ( 0xf003400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
549           sshl_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01011110001000000100010000000000 ( 0x5e204400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
550           sshl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000100010000000000 ( 0xe204400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
551          sshll_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000001010010000000000 ( 0xf00a400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
552           sshr_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000000000010000000000 ( 0x5f000400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
553           sshr_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000000000010000000000 ( 0xf000400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
554           ssra_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01011111000000000001010000000000 ( 0x5f001400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
555           ssra_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00001111000000000001010000000000 ( 0xf001400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
556          ssubl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000010000000000000 ( 0xe202000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
557          ssubw_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000011000000000000 ( 0xe203000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
558       st1_advsimd_mult 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001100000000000010000000000000 ( 0xc002000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
559       st1_advsimd_mult 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001100100000000010000000000000 ( 0xc802000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
560       st1_advsimd_sngl 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001101000000000000000000000000 ( 0xd000000 ) [('Q',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
561       st1_advsimd_sngl 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001101100000000000000000000000 ( 0xd800000 ) [('Q',), ('Rm',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
562       st2_advsimd_mult 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001100000000001000000000000000 ( 0xc008000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
563       st2_advsimd_mult 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001100100000001000000000000000 ( 0xc808000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
564       st2_advsimd_sngl 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001101001000000000000000000000 ( 0xd200000 ) [('Q',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
565       st2_advsimd_sngl 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001101101000000000000000000000 ( 0xda00000 ) [('Q',), ('Rm',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
566       st3_advsimd_mult 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001100000000000100000000000000 ( 0xc004000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
567       st3_advsimd_mult 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001100100000000100000000000000 ( 0xc804000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
568       st3_advsimd_sngl 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001101000000000010000000000000 ( 0xd002000 ) [('Q',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
569       st3_advsimd_sngl 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001101100000000010000000000000 ( 0xd802000 ) [('Q',), ('Rm',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
570       st4_advsimd_mult 	10111111111111111111000000000000 ( 0xbffff000 ) 	00001100000000000000000000000000 ( 0xc000000 ) [('Q',), ('size',), ('Rn',), ('Rt',)]
571       st4_advsimd_mult 	10111111111000001111000000000000 ( 0xbfe0f000 ) 	00001100100000000000000000000000 ( 0xc800000 ) [('Q',), ('Rm',), ('size',), ('Rn',), ('Rt',)]
572       st4_advsimd_sngl 	10111111111111110010000000000000 ( 0xbfff2000 ) 	00001101001000000010000000000000 ( 0xd202000 ) [('Q',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
573       st4_advsimd_sngl 	10111111111000000010000000000000 ( 0xbfe02000 ) 	00001101101000000010000000000000 ( 0xda02000 ) [('Q',), ('Rm',), ('S', [12, 12]), ('size',), ('Rn',), ('Rt',)]
574                   stlr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000100000001000000000000000 ( 0x88808000 ) [('Rn',), ('Rt',)]
575                  stlrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000100000001000000000000000 ( 0x8808000 ) [('Rn',), ('Rt',)]
576                  stlrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000100000001000000000000000 ( 0x48808000 ) [('Rn',), ('Rt',)]
577                  stlxp 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000001000001000000000000000 ( 0x88208000 ) [('sz',), ('Rs',), ('Rt2',), ('Rn',), ('Rt',)]
578                  stlxr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000000000001000000000000000 ( 0x88008000 ) [('Rs',), ('Rn',), ('Rt',)]
579                 stlxrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000000000001000000000000000 ( 0x8008000 ) [('Rs',), ('Rn',), ('Rt',)]
580                 stlxrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000000000001000000000000000 ( 0x48008000 ) [('Rs',), ('Rn',), ('Rt',)]
581            stnp_fpsimd 	00111111110000000000000000000000 ( 0x3fc00000 ) 	00101100000000000000000000000000 ( 0x2c000000 ) [('opc',), ('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
582               stnp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101000000000000000000000000000 ( 0x28000000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
583             stp_fpsimd 	00111111110000000000000000000000 ( 0x3fc00000 ) 	00101100100000000000000000000000 ( 0x2c800000 ) [('opc',), ('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
584             stp_fpsimd 	00111111110000000000000000000000 ( 0x3fc00000 ) 	00101101100000000000000000000000 ( 0x2d800000 ) [('opc',), ('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
585             stp_fpsimd 	00111111110000000000000000000000 ( 0x3fc00000 ) 	00101101000000000000000000000000 ( 0x2d000000 ) [('opc',), ('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
586                stp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101000100000000000000000000000 ( 0x28800000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
587                stp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101001100000000000000000000000 ( 0x29800000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
588                stp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101001000000000000000000000000 ( 0x29000000 ) [('imm', [21, 15]), ('Rt2',), ('Rn',), ('Rt',)]
589         str_imm_fpsimd 	00111111011000000000110000000000 ( 0x3f600c00 ) 	00111100000000000000010000000000 ( 0x3c000400 ) [('size',), ('imm', [20, 12]), ('Rn',), ('Rt',)]
590         str_imm_fpsimd 	00111111011000000000110000000000 ( 0x3f600c00 ) 	00111100000000000000110000000000 ( 0x3c000c00 ) [('size',), ('imm', [20, 12]), ('Rn',), ('Rt',)]
591         str_imm_fpsimd 	00111111010000000000000000000000 ( 0x3f400000 ) 	00111101000000000000000000000000 ( 0x3d000000 ) [('size',), ('imm', [21, 10]), ('Rn',), ('Rt',)]
592            str_imm_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000000000000000010000000000 ( 0xb8000400 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
593            str_imm_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000000000000000110000000000 ( 0xb8000c00 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
594            str_imm_gen 	10111111110000000000000000000000 ( 0xbfc00000 ) 	10111001000000000000000000000000 ( 0xb9000000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
595         str_reg_fpsimd 	00111111011000000000110000000000 ( 0x3f600c00 ) 	00111100001000000000100000000000 ( 0x3c200800 ) [('size',), ('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
596            str_reg_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000001000000000100000000000 ( 0xb8200800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
597               strb_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000000000000000010000000000 ( 0x38000400 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
598               strb_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000000000000000110000000000 ( 0x38000c00 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
599               strb_imm 	11111111110000000000000000000000 ( 0xffc00000 ) 	00111001000000000000000000000000 ( 0x39000000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
600               strb_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000001000000000100000000000 ( 0x38200800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
601               strh_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000000000000000010000000000 ( 0x78000400 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
602               strh_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000000000000000110000000000 ( 0x78000c00 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
603               strh_imm 	11111111110000000000000000000000 ( 0xffc00000 ) 	01111001000000000000000000000000 ( 0x79000000 ) [('imm', [21, 10]), ('Rn',), ('Rt',)]
604               strh_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000001000000000100000000000 ( 0x78200800 ) [('Rm',), ('option', [15, 13]), ('S', [12, 12]), ('Rn',), ('Rt',)]
605                   sttr 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000000000000000100000000000 ( 0xb8000800 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
606                  sttrb 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000000000000000100000000000 ( 0x38000800 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
607                  sttrh 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000000000000000100000000000 ( 0x78000800 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
608            stur_fpsimd 	00111111011000000000110000000000 ( 0x3f600c00 ) 	00111100000000000000000000000000 ( 0x3c000000 ) [('size',), ('imm', [20, 12]), ('Rn',), ('Rt',)]
609               stur_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000000000000000000000000000 ( 0xb8000000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
610                  sturb 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000000000000000000000000000 ( 0x38000000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
611                  sturh 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000000000000000000000000000 ( 0x78000000 ) [('imm', [20, 12]), ('Rn',), ('Rt',)]
612                   stxp 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000001000000000000000000000 ( 0x88200000 ) [('sz',), ('Rs',), ('Rt2',), ('Rn',), ('Rt',)]
613                   stxr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000000000000000000000000000 ( 0x88000000 ) [('Rs',), ('Rn',), ('Rt',)]
614                  stxrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000000000000000000000000000 ( 0x8000000 ) [('Rs',), ('Rn',), ('Rt',)]
615                  stxrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000000000000000000000000000 ( 0x48000000 ) [('Rs',), ('Rn',), ('Rt',)]
616         sub_addsub_ext 	01111111111000000000000000000000 ( 0x7fe00000 ) 	01001011001000000000000000000000 ( 0x4b200000 ) [('sf',), ('Rm',), ('option', [15, 13]), ('imm', [12, 10]), ('Rn',), ('Rd',)]
617         sub_addsub_imm 	01111111000000000000000000000000 ( 0x7f000000 ) 	01010001000000000000000000000000 ( 0x51000000 ) [('sf',), ('shift',), ('imm', [21, 10]), ('Rn',), ('Rd',)]
618       sub_addsub_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	01001011000000000000000000000000 ( 0x4b000000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
619            sub_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000001000010000000000 ( 0x7e208400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
620            sub_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001000010000000000 ( 0x2e208400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
621          subhn_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110001000000110000000000000 ( 0xe206000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
622        subs_addsub_ext 	01111111111000000000000000000000 ( 0x7fe00000 ) 	01101011001000000000000000000000 ( 0x6b200000 ) [('sf',), ('Rm',), ('option', [15, 13]), ('imm', [12, 10]), ('Rn',), ('Rd',)]
623        subs_addsub_imm 	01111111000000000000000000000000 ( 0x7f000000 ) 	01110001000000000000000000000000 ( 0x71000000 ) [('sf',), ('shift',), ('imm', [21, 10]), ('Rn',), ('Rd',)]
624      subs_addsub_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	01101011000000000000000000000000 ( 0x6b000000 ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',), ('Rd',)]
625         suqadd_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01011110001000000011100000000000 ( 0x5e203800 ) [('size',), ('Rn',), ('Rd',)]
626         suqadd_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000000011100000000000 ( 0xe203800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
627                    svc 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100000000000000000000000001 ( 0xd4000001 ) [('imm', [20, 5])]
628              sxtb_sbfm 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00010011000000000001110000000000 ( 0x13001c00 ) [('sf',), ('N', [22, 22]), ('Rn',), ('Rd',)]
629              sxth_sbfm 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00010011000000000011110000000000 ( 0x13003c00 ) [('sf',), ('N', [22, 22]), ('Rn',), ('Rd',)]
630     sxtl_sshll_advsimd 	10111111100001111111110000000000 ( 0xbf87fc00 ) 	00001111000000001010010000000000 ( 0xf00a400 ) [('Q',), ('Rn',), ('Rd',)]
631              sxtw_sbfm 	11111111111111111111110000000000 ( 0xfffffc00 ) 	10010011010000000111110000000000 ( 0x93407c00 ) [('Rn',), ('Rd',)]
632                    sys 	11111111111110000000000000000000 ( 0xfff80000 ) 	11010101000010000000000000000000 ( 0xd5080000 ) [('op1',), ('CRn',), ('CRm',), ('op2',), ('Rt',)]
633                   sysl 	11111111111110000000000000000000 ( 0xfff80000 ) 	11010101001010000000000000000000 ( 0xd5280000 ) [('op1',), ('CRn',), ('CRm',), ('op2',), ('Rt',)]
634            tbl_advsimd 	10111111111000001001110000000000 ( 0xbfe09c00 ) 	00001110000000000000000000000000 ( 0xe000000 ) [('Q',), ('Rm',), ('len',), ('Rn',), ('Rd',)]
635                   tbnz 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110111000000000000000000000000 ( 0x37000000 ) [('b5',), ('b40',), ('imm', [18, 5]), ('Rt',)]
636            tbx_advsimd 	10111111111000001001110000000000 ( 0xbfe09c00 ) 	00001110000000000001000000000000 ( 0xe001000 ) [('Q',), ('Rm',), ('len',), ('Rn',), ('Rd',)]
637                    tbz 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110110000000000000000000000000 ( 0x36000000 ) [('b5',), ('b40',), ('imm', [18, 5]), ('Rt',)]
638               tlbi_sys 	11111111111110001111000000000000 ( 0xfff8f000 ) 	11010101000010001000000000000000 ( 0xd5088000 ) [('op1',), ('CRm',), ('op2',), ('Rt',)]
639           trn1_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110000000000010100000000000 ( 0xe002800 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
640           trn2_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110000000000110100000000000 ( 0xe006800 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
641       tst_ands_log_imm 	01111111100000000000000000011111 ( 0x7f80001f ) 	01110010000000000000000000011111 ( 0x7200001f ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',)]
642     tst_ands_log_shift 	01111111001000000000000000011111 ( 0x7f20001f ) 	01101010000000000000000000011111 ( 0x6a00001f ) [('sf',), ('shift',), ('Rm',), ('imm', [15, 10]), ('Rn',)]
643           uaba_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000111110000000000 ( 0x2e207c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
644          uabal_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000101000000000000 ( 0x2e205000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
645           uabd_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000111010000000000 ( 0x2e207400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
646          uabdl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000111000000000000 ( 0x2e207000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
647         uadalp_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000000110100000000000 ( 0x2e206800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
648          uaddl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000000000000000000 ( 0x2e200000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
649         uaddlp_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000000010100000000000 ( 0x2e202800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
650         uaddlv_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001100000011100000000000 ( 0x2e303800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
651          uaddw_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000001000000000000 ( 0x2e201000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
652             ubfiz_ubfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010011000000000000000000000000 ( 0x53000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
653                   ubfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010011000000000000000000000000 ( 0x53000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
654              ubfx_ubfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010011000000000000000000000000 ( 0x53000000 ) [('sf',), ('N', [22, 22]), ('imm', [21, 16]), ('imm', [15, 10]), ('Rn',), ('Rd',)]
655      ucvtf_advsimd_fix 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000001110010000000000 ( 0x7f00e400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
656      ucvtf_advsimd_fix 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000001110010000000000 ( 0x2f00e400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
657      ucvtf_advsimd_int 	11111111101111111111110000000000 ( 0xffbffc00 ) 	01111110001000011101100000000000 ( 0x7e21d800 ) [('sz',), ('Rn',), ('Rd',)]
658      ucvtf_advsimd_int 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110001000011101100000000000 ( 0x2e21d800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
659        ucvtf_float_fix 	01111111101111110000000000000000 ( 0x7fbf0000 ) 	00011110000000110000000000000000 ( 0x1e030000 ) [('sf',), ('scale',), ('Rn',), ('Rd',)]
660        ucvtf_float_int 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00011110001000110000000000000000 ( 0x1e230000 ) [('sf',), ('Rn',), ('Rd',)]
661                   udiv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000000100000000000 ( 0x1ac00800 ) [('sf',), ('Rm',), ('Rn',), ('Rd',)]
662          uhadd_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000000010000000000 ( 0x2e200400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
663          uhsub_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000010010000000000 ( 0x2e202400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
664                 umaddl 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011101000000000000000000000 ( 0x9ba00000 ) [('Rm',), ('Ra',), ('Rn',), ('Rd',)]
665           umax_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000110010000000000 ( 0x2e206400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
666          umaxp_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001010010000000000 ( 0x2e20a400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
667          umaxv_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001100001010100000000000 ( 0x2e30a800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
668           umin_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000110110000000000 ( 0x2e206c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
669          uminp_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001010110000000000 ( 0x2e20ac00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
670          uminv_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001100011010100000000000 ( 0x2e31a800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
671      umlal_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00101111000000000010000000000000 ( 0x2f002000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
672      umlal_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001000000000000000 ( 0x2e208000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
673      umlsl_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00101111000000000110000000000000 ( 0x2f006000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
674      umlsl_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001010000000000000 ( 0x2e20a000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
675          umnegl_umsubl 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	10011011101000001111110000000000 ( 0x9ba0fc00 ) [('Rm',), ('Rn',), ('Rd',)]
676           umov_advsimd 	10111111111000001111110000000000 ( 0xbfe0fc00 ) 	00001110000000000011110000000000 ( 0xe003c00 ) [('Q',), ('imm', [20, 16]), ('Rn',), ('Rd',)]
677                 umsubl 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011101000001000000000000000 ( 0x9ba08000 ) [('Rm',), ('Ra',), ('Rn',), ('Rd',)]
678                  umulh 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011110000000000000000000000 ( 0x9bc00000 ) [('Rm',), ('Rn',), ('Rd',)]
679      umull_advsimd_elt 	10111111000000001111010000000000 ( 0xbf00f400 ) 	00101111000000001010000000000000 ( 0x2f00a000 ) [('Q',), ('size',), ('L',), ('M',), ('Rm',), ('H',), ('Rn',), ('Rd',)]
680      umull_advsimd_vec 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000001100000000000000 ( 0x2e20c000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
681           umull_umaddl 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	10011011101000000111110000000000 ( 0x9ba07c00 ) [('Rm',), ('Rn',), ('Rd',)]
682          uqadd_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000000000110000000000 ( 0x7e200c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
683          uqadd_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000000110000000000 ( 0x2e200c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
684         uqrshl_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000000101110000000000 ( 0x7e205c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
685         uqrshl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000101110000000000 ( 0x2e205c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
686        uqrshrn_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000001001110000000000 ( 0x7f009c00 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
687        uqrshrn_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000001001110000000000 ( 0x2f009c00 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
688      uqshl_advsimd_imm 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000000111010000000000 ( 0x7f007400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
689      uqshl_advsimd_imm 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000000111010000000000 ( 0x2f007400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
690      uqshl_advsimd_reg 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000000100110000000000 ( 0x7e204c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
691      uqshl_advsimd_reg 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000100110000000000 ( 0x2e204c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
692         uqshrn_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000001001010000000000 ( 0x7f009400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
693         uqshrn_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000001001010000000000 ( 0x2f009400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
694          uqsub_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000000010110000000000 ( 0x7e202c00 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
695          uqsub_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000010110000000000 ( 0x2e202c00 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
696          uqxtn_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01111110001000010100100000000000 ( 0x7e214800 ) [('size',), ('Rn',), ('Rd',)]
697          uqxtn_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000010100100000000000 ( 0x2e214800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
698         urecpe_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00001110101000011100100000000000 ( 0xea1c800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
699         urhadd_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000001010000000000 ( 0x2e201400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
700          urshl_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000000101010000000000 ( 0x7e205400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
701          urshl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000101010000000000 ( 0x2e205400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
702          urshr_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000000010010000000000 ( 0x7f002400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
703          urshr_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000000010010000000000 ( 0x2f002400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
704        ursqrte_advsimd 	10111111101111111111110000000000 ( 0xbfbffc00 ) 	00101110101000011100100000000000 ( 0x2ea1c800 ) [('Q',), ('sz',), ('Rn',), ('Rd',)]
705          ursra_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000000011010000000000 ( 0x7f003400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
706          ursra_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000000011010000000000 ( 0x2f003400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
707           ushl_advsimd 	11111111001000001111110000000000 ( 0xff20fc00 ) 	01111110001000000100010000000000 ( 0x7e204400 ) [('size',), ('Rm',), ('Rn',), ('Rd',)]
708           ushl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000100010000000000 ( 0x2e204400 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
709          ushll_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000001010010000000000 ( 0x2f00a400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
710           ushr_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000000000010000000000 ( 0x7f000400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
711           ushr_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000000000010000000000 ( 0x2f000400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
712         usqadd_advsimd 	11111111001111111111110000000000 ( 0xff3ffc00 ) 	01111110001000000011100000000000 ( 0x7e203800 ) [('size',), ('Rn',), ('Rd',)]
713         usqadd_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00101110001000000011100000000000 ( 0x2e203800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
714           usra_advsimd 	11111111100000001111110000000000 ( 0xff80fc00 ) 	01111111000000000001010000000000 ( 0x7f001400 ) [('imm', [18, 16]), ('Rn',), ('Rd',)]
715           usra_advsimd 	10111111100000001111110000000000 ( 0xbf80fc00 ) 	00101111000000000001010000000000 ( 0x2f001400 ) [('Q',), ('imm', [18, 16]), ('Rn',), ('Rd',)]
716          usubl_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000010000000000000 ( 0x2e202000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
717          usubw_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00101110001000000011000000000000 ( 0x2e203000 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
718              uxtb_ubfm 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01010011000000000001110000000000 ( 0x53001c00 ) [('Rn',), ('Rd',)]
719              uxth_ubfm 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01010011000000000011110000000000 ( 0x53003c00 ) [('Rn',), ('Rd',)]
720     uxtl_ushll_advsimd 	10111111100001111111110000000000 ( 0xbf87fc00 ) 	00101111000000001010010000000000 ( 0x2f00a400 ) [('Q',), ('Rn',), ('Rd',)]
721           uzp1_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110000000000001100000000000 ( 0xe001800 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
722           uzp2_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110000000000101100000000000 ( 0xe005800 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
723               wfe_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000001011111 ( 0xd503205f ) []
724               wfi_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000001111111 ( 0xd503207f ) []
725            xtn_advsimd 	10111111001111111111110000000000 ( 0xbf3ffc00 ) 	00001110001000010010100000000000 ( 0xe212800 ) [('Q',), ('size',), ('Rn',), ('Rd',)]
726             yield_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000000111111 ( 0xd503203f ) []
727           zip1_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110000000000011100000000000 ( 0xe003800 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
728           zip2_advsimd 	10111111001000001111110000000000 ( 0xbf20fc00 ) 	00001110000000000111100000000000 ( 0xe007800 ) [('Q',), ('size',), ('Rm',), ('Rn',), ('Rd',)]
729
*** instruction table ***
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_unallocated, 	"unallocated",	operandSpec() ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_abs_advsimd, 	"abs",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_abs_advsimd, 	"abs",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_adc, 	"adc",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_adcs, 	"adcs",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_add_addsub_ext, 	"add",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRimm<12,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_add_addsub_imm, 	"add",	list_of(fn( OPRsf))(fn( OPRshift))(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_add_addsub_shift, 	"add",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_add_advsimd, 	"add",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_add_advsimd, 	"add",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_addhn_advsimd, 	"addhn",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_addp_advsimd_pair, 	"addp",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_addp_advsimd_vec, 	"addp",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_adds_addsub_ext, 	"adds",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRimm<12,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_adds_addsub_imm, 	"adds",	list_of(fn( OPRsf))(fn( OPRshift))(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_adds_addsub_shift, 	"adds",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_addv_advsimd, 	"addv",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_adr, 	"adr",	list_of(fn( ( OPRimm<30,29>) ))(fn( ( OPRimm<23,5>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_adrp, 	"adrp",	list_of(fn( ( OPRimm<30,29>) ))(fn( ( OPRimm<23,5>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_aesd_advsimd, 	"aesd",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_aese_advsimd, 	"aese",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_aesimc_advsimd, 	"aesimc",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_aesmc_advsimd, 	"aesmc",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_and_advsimd, 	"and",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_and_log_imm, 	"and",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_and_log_shift, 	"and",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ands_log_imm, 	"ands",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ands_log_shift, 	"ands",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_asr_asrv, 	"asr",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_asr_sbfm, 	"asr",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_asrv, 	"asrv",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_at_sys, 	"at",	list_of(fn( OPRop1))(fn( OPRop2))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_b_cond, 	"b",	list_of(fn( ( OPRimm<23,5>) ))(fn( ( OPRcond<3,0>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_b_uncond, 	"b",	list_of(fn( ( OPRimm<25,0>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bfi_bfm, 	"bfi",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bfm, 	"bfm",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bfxil_bfm, 	"bfxil",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bic_advsimd_imm, 	"bic",	list_of(fn( OPRQ))(fn( OPRa))(fn( OPRb))(fn( OPRc))(fn( OPRd))(fn( OPRe))(fn( OPRf))(fn( OPRg))(fn( OPRh))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bic_advsimd_reg, 	"bic",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bic_log_shift, 	"bic",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bics, 	"bics",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bif_advsimd, 	"bif",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bit_advsimd, 	"bit",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bl, 	"bl",	list_of(fn( ( OPRimm<25,0>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_blr, 	"blr",	list_of(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_br, 	"br",	list_of(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_brk, 	"brk",	list_of(fn( ( OPRimm<20,5>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_bsl_advsimd, 	"bsl",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cbnz, 	"cbnz",	list_of(fn( OPRsf))(fn( ( OPRimm<23,5>) ))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cbz, 	"cbz",	list_of(fn( OPRsf))(fn( ( OPRimm<23,5>) ))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ccmn_imm, 	"ccmn",	list_of(fn( OPRsf))(fn( ( OPRimm<20,16>) ))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRnzcv)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ccmn_reg, 	"ccmn",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRnzcv)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ccmp_imm, 	"ccmp",	list_of(fn( OPRsf))(fn( ( OPRimm<20,16>) ))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRnzcv)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ccmp_reg, 	"ccmp",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRnzcv)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cinc_csinc, 	"cinc",	list_of(fn( OPRsf))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cinv_csinv, 	"cinv",	list_of(fn( OPRsf))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_clrex, 	"clrex",	list_of(fn( OPRCRm)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cls_advsimd, 	"cls",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cls_int, 	"cls",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_clz_advsimd, 	"clz",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_clz_int, 	"clz",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmeq_advsimd_reg, 	"cmeq",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmeq_advsimd_reg, 	"cmeq",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmeq_advsimd_zero, 	"cmeq",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmeq_advsimd_zero, 	"cmeq",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmge_advsimd_reg, 	"cmge",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmge_advsimd_reg, 	"cmge",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmge_advsimd_zero, 	"cmge",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmge_advsimd_zero, 	"cmge",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmgt_advsimd_reg, 	"cmgt",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmgt_advsimd_reg, 	"cmgt",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmgt_advsimd_zero, 	"cmgt",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmgt_advsimd_zero, 	"cmgt",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmhi_advsimd, 	"cmhi",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmhi_advsimd, 	"cmhi",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmhs_advsimd, 	"cmhs",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmhs_advsimd, 	"cmhs",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmle_advsimd, 	"cmle",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmle_advsimd, 	"cmle",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmlt_advsimd, 	"cmlt",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmlt_advsimd, 	"cmlt",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmn_adds_addsub_ext, 	"cmn",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRimm<12,10>) ))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmn_adds_addsub_imm, 	"cmn",	list_of(fn( OPRsf))(fn( OPRshift))(fn( ( OPRimm<21,10>) ))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmn_adds_addsub_shift, 	"cmn",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmp_subs_addsub_ext, 	"cmp",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRimm<12,10>) ))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmp_subs_addsub_imm, 	"cmp",	list_of(fn( OPRsf))(fn( OPRshift))(fn( ( OPRimm<21,10>) ))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmp_subs_addsub_shift, 	"cmp",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmtst_advsimd, 	"cmtst",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmtst_advsimd, 	"cmtst",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cneg_csneg, 	"cneg",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cnt_advsimd, 	"cnt",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_crc32, 	"crc32",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_crc32c, 	"crc32c",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_csel, 	"csel",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_cset_csinc, 	"cset",	list_of(fn( OPRsf))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_csetm_csinv, 	"csetm",	list_of(fn( OPRsf))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_csinc, 	"csinc",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_csinv, 	"csinv",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_csneg, 	"csneg",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_dc_sys, 	"dc",	list_of(fn( OPRop1))(fn( OPRCRm))(fn( OPRop2))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_dcps1, 	"dcps1",	list_of(fn( ( OPRimm<20,5>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_dcps2, 	"dcps2",	list_of(fn( ( OPRimm<20,5>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_dcps3, 	"dcps3",	list_of(fn( ( OPRimm<20,5>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_dmb, 	"dmb",	list_of(fn( OPRCRm)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_drps, 	"drps",	operandSpec() ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_dsb, 	"dsb",	list_of(fn( OPRCRm)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_dup_advsimd_elt, 	"dup",	list_of(fn( ( OPRimm<20,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_dup_advsimd_elt, 	"dup",	list_of(fn( OPRQ))(fn( ( OPRimm<20,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_dup_advsimd_gen, 	"dup",	list_of(fn( OPRQ))(fn( ( OPRimm<20,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_eon, 	"eon",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_eor_advsimd, 	"eor",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_eor_log_imm, 	"eor",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_eor_log_shift, 	"eor",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_eret, 	"eret",	operandSpec() ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ext_advsimd, 	"ext",	list_of(fn( OPRQ))(fn( OPRRm))(fn( ( OPRimm<14,11>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_extr, 	"extr",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fabd_advsimd, 	"fabd",	list_of(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fabd_advsimd, 	"fabd",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fabs_advsimd, 	"fabs",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fabs_float, 	"fabs",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_facge_advsimd, 	"facge",	list_of(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_facge_advsimd, 	"facge",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_facgt_advsimd, 	"facgt",	list_of(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_facgt_advsimd, 	"facgt",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fadd_advsimd, 	"fadd",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fadd_float, 	"fadd",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_faddp_advsimd_pair, 	"faddp",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_faddp_advsimd_vec, 	"faddp",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fccmp_float, 	"fccmp",	list_of(fn( OPRRm))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRnzcv)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fccmpe_float, 	"fccmpe",	list_of(fn( OPRRm))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRnzcv)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmeq_advsimd_reg, 	"fcmeq",	list_of(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmeq_advsimd_reg, 	"fcmeq",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmeq_advsimd_zero, 	"fcmeq",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmeq_advsimd_zero, 	"fcmeq",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmge_advsimd_reg, 	"fcmge",	list_of(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmge_advsimd_reg, 	"fcmge",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmge_advsimd_zero, 	"fcmge",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmge_advsimd_zero, 	"fcmge",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmgt_advsimd_reg, 	"fcmgt",	list_of(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmgt_advsimd_reg, 	"fcmgt",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmgt_advsimd_zero, 	"fcmgt",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmgt_advsimd_zero, 	"fcmgt",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmle_advsimd, 	"fcmle",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmle_advsimd, 	"fcmle",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmlt_advsimd, 	"fcmlt",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmlt_advsimd, 	"fcmlt",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmp_float, 	"fcmp",	list_of(fn( OPRRm))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcmpe_float, 	"fcmpe",	list_of(fn( OPRRm))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcsel_float, 	"fcsel",	list_of(fn( OPRRm))(fn( ( OPRcond<15,12>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvt_float, 	"fcvt",	list_of(fn( OPRtype))(fn( OPRopc))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtas_advsimd, 	"fcvtas",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtas_advsimd, 	"fcvtas",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtas_float, 	"fcvtas",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtau_advsimd, 	"fcvtau",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtau_advsimd, 	"fcvtau",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtau_float, 	"fcvtau",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtl_advsimd, 	"fcvtl",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtms_advsimd, 	"fcvtms",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtms_advsimd, 	"fcvtms",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtms_float, 	"fcvtms",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtmu_advsimd, 	"fcvtmu",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtmu_advsimd, 	"fcvtmu",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtmu_float, 	"fcvtmu",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtn_advsimd, 	"fcvtn",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtns_advsimd, 	"fcvtns",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtns_advsimd, 	"fcvtns",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtns_float, 	"fcvtns",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtnu_advsimd, 	"fcvtnu",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtnu_advsimd, 	"fcvtnu",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtnu_float, 	"fcvtnu",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtps_advsimd, 	"fcvtps",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtps_advsimd, 	"fcvtps",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtps_float, 	"fcvtps",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtpu_advsimd, 	"fcvtpu",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtpu_advsimd, 	"fcvtpu",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtpu_float, 	"fcvtpu",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtxn_advsimd, 	"fcvtxn",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtxn_advsimd, 	"fcvtxn",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzs_advsimd_fix, 	"fcvtzs",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzs_advsimd_fix, 	"fcvtzs",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzs_advsimd_int, 	"fcvtzs",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzs_advsimd_int, 	"fcvtzs",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzs_float_fix, 	"fcvtzs",	list_of(fn( OPRsf))(fn( OPRscale))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzs_float_int, 	"fcvtzs",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzu_advsimd_fix, 	"fcvtzu",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzu_advsimd_fix, 	"fcvtzu",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzu_advsimd_int, 	"fcvtzu",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzu_advsimd_int, 	"fcvtzu",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzu_float_fix, 	"fcvtzu",	list_of(fn( OPRsf))(fn( OPRscale))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fcvtzu_float_int, 	"fcvtzu",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fdiv_advsimd, 	"fdiv",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fdiv_float, 	"fdiv",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmadd_float, 	"fmadd",	list_of(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmax_advsimd, 	"fmax",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmax_float, 	"fmax",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmaxnm_advsimd, 	"fmaxnm",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmaxnm_float, 	"fmaxnm",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmaxnmp_advsimd_pair, 	"fmaxnmp",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmaxnmp_advsimd_vec, 	"fmaxnmp",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmaxnmv_advsimd, 	"fmaxnmv",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmaxp_advsimd_pair, 	"fmaxp",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmaxp_advsimd_vec, 	"fmaxp",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmaxv_advsimd, 	"fmaxv",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmin_advsimd, 	"fmin",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmin_float, 	"fmin",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fminnm_advsimd, 	"fminnm",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fminnm_float, 	"fminnm",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fminnmp_advsimd_pair, 	"fminnmp",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fminnmp_advsimd_vec, 	"fminnmp",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fminnmv_advsimd, 	"fminnmv",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fminp_advsimd_pair, 	"fminp",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fminp_advsimd_vec, 	"fminp",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fminv_advsimd, 	"fminv",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmla_advsimd_elt, 	"fmla",	list_of(fn( OPRsz))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmla_advsimd_elt, 	"fmla",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmla_advsimd_vec, 	"fmla",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmls_advsimd_elt, 	"fmls",	list_of(fn( OPRsz))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmls_advsimd_elt, 	"fmls",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmls_advsimd_vec, 	"fmls",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmov_advsimd, 	"fmov",	list_of(fn( OPRQ))(fn( OPRop))(fn( OPRa))(fn( OPRb))(fn( OPRc))(fn( OPRd))(fn( OPRe))(fn( OPRf))(fn( OPRg))(fn( OPRh))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmov_float, 	"fmov",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmov_float_gen, 	"fmov",	list_of(fn( OPRsf))(fn( OPRtype))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmov_float_imm, 	"fmov",	list_of(fn( ( OPRimm<20,13>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmsub_float, 	"fmsub",	list_of(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmul_advsimd_elt, 	"fmul",	list_of(fn( OPRsz))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmul_advsimd_elt, 	"fmul",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmul_advsimd_vec, 	"fmul",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmul_float, 	"fmul",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmulx_advsimd_elt, 	"fmulx",	list_of(fn( OPRsz))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmulx_advsimd_elt, 	"fmulx",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmulx_advsimd_vec, 	"fmulx",	list_of(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fmulx_advsimd_vec, 	"fmulx",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fneg_advsimd, 	"fneg",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fneg_float, 	"fneg",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fnmadd_float, 	"fnmadd",	list_of(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fnmsub_float, 	"fnmsub",	list_of(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fnmul_float, 	"fnmul",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frecpe_advsimd, 	"frecpe",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frecpe_advsimd, 	"frecpe",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frecps_advsimd, 	"frecps",	list_of(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frecps_advsimd, 	"frecps",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frecpx_advsimd, 	"frecpx",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frinta_advsimd, 	"frinta",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frinta_float, 	"frinta",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frinti_advsimd, 	"frinti",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frinti_float, 	"frinti",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintm_advsimd, 	"frintm",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintm_float, 	"frintm",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintn_advsimd, 	"frintn",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintn_float, 	"frintn",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintp_advsimd, 	"frintp",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintp_float, 	"frintp",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintx_advsimd, 	"frintx",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintx_float, 	"frintx",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintz_advsimd, 	"frintz",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frintz_float, 	"frintz",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frsqrte_advsimd, 	"frsqrte",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frsqrte_advsimd, 	"frsqrte",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frsqrts_advsimd, 	"frsqrts",	list_of(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_frsqrts_advsimd, 	"frsqrts",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fsqrt_advsimd, 	"fsqrt",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fsqrt_float, 	"fsqrt",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fsub_advsimd, 	"fsub",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_fsub_float, 	"fsub",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_hint, 	"hint",	list_of(fn( OPRCRm))(fn( OPRop2)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_hlt, 	"hlt",	list_of(fn( ( OPRimm<20,5>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_hvc, 	"hvc",	list_of(fn( ( OPRimm<20,5>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ic_sys, 	"ic",	list_of(fn( OPRop1))(fn( OPRCRm))(fn( OPRop2))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ins_advsimd_elt, 	"ins",	list_of(fn( ( OPRimm<20,16>) ))(fn( ( OPRimm<14,11>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ins_advsimd_gen, 	"ins",	list_of(fn( ( OPRimm<20,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_isb, 	"isb",	list_of(fn( OPRCRm)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld1_advsimd_mult, 	"ld1",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld1_advsimd_mult, 	"ld1",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld1_advsimd_sngl, 	"ld1",	list_of(fn( OPRQ))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld1_advsimd_sngl, 	"ld1",	list_of(fn( OPRQ))(fn( OPRRm))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld1r_advsimd, 	"ld1r",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld1r_advsimd, 	"ld1r",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld2_advsimd_mult, 	"ld2",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld2_advsimd_mult, 	"ld2",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld2_advsimd_sngl, 	"ld2",	list_of(fn( OPRQ))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld2_advsimd_sngl, 	"ld2",	list_of(fn( OPRQ))(fn( OPRRm))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld2r_advsimd, 	"ld2r",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld2r_advsimd, 	"ld2r",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld3_advsimd_mult, 	"ld3",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld3_advsimd_mult, 	"ld3",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld3_advsimd_sngl, 	"ld3",	list_of(fn( OPRQ))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld3_advsimd_sngl, 	"ld3",	list_of(fn( OPRQ))(fn( OPRRm))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld3r_advsimd, 	"ld3r",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld3r_advsimd, 	"ld3r",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld4_advsimd_mult, 	"ld4",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld4_advsimd_mult, 	"ld4",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld4_advsimd_sngl, 	"ld4",	list_of(fn( OPRQ))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld4_advsimd_sngl, 	"ld4",	list_of(fn( OPRQ))(fn( OPRRm))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld4r_advsimd, 	"ld4r",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ld4r_advsimd, 	"ld4r",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldar, 	"ldar",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldarb, 	"ldarb",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldarh, 	"ldarh",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldaxp, 	"ldaxp",	list_of(fn( OPRsz))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldaxr, 	"ldaxr",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldaxrb, 	"ldaxrb",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldaxrh, 	"ldaxrh",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldnp_fpsimd, 	"ldnp",	list_of(fn( OPRopc))(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldnp_gen, 	"ldnp",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldp_fpsimd, 	"ldp",	list_of(fn( OPRopc))(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldp_fpsimd, 	"ldp",	list_of(fn( OPRopc))(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldp_fpsimd, 	"ldp",	list_of(fn( OPRopc))(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldp_gen, 	"ldp",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldp_gen, 	"ldp",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldp_gen, 	"ldp",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldpsw, 	"ldpsw",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldpsw, 	"ldpsw",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldpsw, 	"ldpsw",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_imm_fpsimd, 	"ldr",	list_of(fn( OPRsize))(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_imm_fpsimd, 	"ldr",	list_of(fn( OPRsize))(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_imm_fpsimd, 	"ldr",	list_of(fn( OPRsize))(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_imm_gen, 	"ldr",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_imm_gen, 	"ldr",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_imm_gen, 	"ldr",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_lit_fpsimd, 	"ldr",	list_of(fn( OPRopc))(fn( ( OPRimm<23,5>) ))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_lit_gen, 	"ldr",	list_of(fn( ( OPRimm<23,5>) ))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_reg_fpsimd, 	"ldr",	list_of(fn( OPRsize))(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_reg_gen, 	"ldr",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrb_imm, 	"ldrb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrb_imm, 	"ldrb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrb_imm, 	"ldrb",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrb_reg, 	"ldrb",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrh_imm, 	"ldrh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrh_imm, 	"ldrh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrh_imm, 	"ldrh",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrh_reg, 	"ldrh",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsb_imm, 	"ldrsb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsb_imm, 	"ldrsb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsb_imm, 	"ldrsb",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsb_reg, 	"ldrsb",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsh_imm, 	"ldrsh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsh_imm, 	"ldrsh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsh_imm, 	"ldrsh",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsh_reg, 	"ldrsh",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsw_imm, 	"ldrsw",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsw_imm, 	"ldrsw",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsw_imm, 	"ldrsw",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsw_lit, 	"ldrsw",	list_of(fn( ( OPRimm<23,5>) ))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsw_reg, 	"ldrsw",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtr, 	"ldtr",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrb, 	"ldtrb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrh, 	"ldtrh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrsb, 	"ldtrsb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrsh, 	"ldtrsh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrsw, 	"ldtrsw",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldur_fpsimd, 	"ldur",	list_of(fn( OPRsize))(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldur_gen, 	"ldur",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldurb, 	"ldurb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldurh, 	"ldurh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldursb, 	"ldursb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldursh, 	"ldursh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldursw, 	"ldursw",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldxp, 	"ldxp",	list_of(fn( OPRsz))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldxr, 	"ldxr",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldxrb, 	"ldxrb",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldxrh, 	"ldxrh",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsl_lslv, 	"lsl",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsl_ubfm, 	"lsl",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_lslv, 	"lslv",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsr_lsrv, 	"lsr",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsr_ubfm, 	"lsr",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsrv, 	"lsrv",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_madd, 	"madd",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mla_advsimd_elt, 	"mla",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mla_advsimd_vec, 	"mla",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mls_advsimd_elt, 	"mls",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mls_advsimd_vec, 	"mls",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mneg_msub, 	"mneg",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_add_addsub_imm, 	"mov",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_dup_advsimd_elt, 	"mov",	list_of(fn( ( OPRimm<20,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_ins_advsimd_elt, 	"mov",	list_of(fn( ( OPRimm<20,16>) ))(fn( ( OPRimm<14,11>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_ins_advsimd_gen, 	"mov",	list_of(fn( ( OPRimm<20,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_movn, 	"mov",	list_of(fn( OPRsf))(fn( OPRhw))(fn( ( OPRimm<20,5>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_movz, 	"mov",	list_of(fn( OPRsf))(fn( OPRhw))(fn( ( OPRimm<20,5>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_orr_advsimd_reg, 	"mov",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_orr_log_imm, 	"mov",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_orr_log_shift, 	"mov",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_umov_advsimd, 	"mov",	list_of(fn( OPRQ))(fn( ( OPRimm<20,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_movi_advsimd, 	"movi",	list_of(fn( OPRQ))(fn( OPRop))(fn( OPRa))(fn( OPRb))(fn( OPRc))(fn( OPRcmode))(fn( OPRd))(fn( OPRe))(fn( OPRf))(fn( OPRg))(fn( OPRh))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_movk, 	"movk",	list_of(fn( OPRsf))(fn( OPRhw))(fn( ( OPRimm<20,5>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_movn, 	"movn",	list_of(fn( OPRsf))(fn( OPRhw))(fn( ( OPRimm<20,5>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_movz, 	"movz",	list_of(fn( OPRsf))(fn( OPRhw))(fn( ( OPRimm<20,5>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mrs, 	"mrs",	list_of(fn( OPRo0))(fn( OPRop1))(fn( OPRCRn))(fn( OPRCRm))(fn( OPRop2))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_msr_imm, 	"msr",	list_of(fn( OPRop1))(fn( OPRCRm))(fn( OPRop2)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_msr_reg, 	"msr",	list_of(fn( OPRo0))(fn( OPRop1))(fn( OPRCRn))(fn( OPRCRm))(fn( OPRop2))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_msub, 	"msub",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mul_advsimd_elt, 	"mul",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mul_advsimd_vec, 	"mul",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mul_madd, 	"mul",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mvn_not_advsimd, 	"mvn",	list_of(fn( OPRQ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mvn_orn_log_shift, 	"mvn",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_mvni_advsimd, 	"mvni",	list_of(fn( OPRQ))(fn( OPRa))(fn( OPRb))(fn( OPRc))(fn( OPRcmode))(fn( OPRd))(fn( OPRe))(fn( OPRf))(fn( OPRg))(fn( OPRh))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_neg_advsimd, 	"neg",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_neg_advsimd, 	"neg",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_neg_sub_addsub_shift, 	"neg",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_negs_subs_addsub_shift, 	"negs",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ngc_sbc, 	"ngc",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ngcs_sbcs, 	"ngcs",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_nop_hint, 	"nop",	operandSpec() ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_not_advsimd, 	"not",	list_of(fn( OPRQ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_orn_advsimd, 	"orn",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_orn_log_shift, 	"orn",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_orr_advsimd_imm, 	"orr",	list_of(fn( OPRQ))(fn( OPRa))(fn( OPRb))(fn( OPRc))(fn( OPRd))(fn( OPRe))(fn( OPRf))(fn( OPRg))(fn( OPRh))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_orr_advsimd_reg, 	"orr",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_orr_log_imm, 	"orr",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_orr_log_shift, 	"orr",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_pmul_advsimd, 	"pmul",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_pmull_advsimd, 	"pmull",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_prfm_imm, 	"prfm",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_prfm_lit, 	"prfm",	list_of(fn( ( OPRimm<23,5>) ))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_prfm_reg, 	"prfm",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_prfum, 	"prfum",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_raddhn_advsimd, 	"raddhn",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rbit_advsimd, 	"rbit",	list_of(fn( OPRQ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rbit_int, 	"rbit",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ret, 	"ret",	list_of(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rev, 	"rev",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rev16_advsimd, 	"rev16",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rev16_int, 	"rev16",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rev32_advsimd, 	"rev32",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rev32_int, 	"rev32",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rev64_advsimd, 	"rev64",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ror_extr, 	"ror",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ror_rorv, 	"ror",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rorv, 	"rorv",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rshrn_advsimd, 	"rshrn",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_rsubhn_advsimd, 	"rsubhn",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_saba_advsimd, 	"saba",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sabal_advsimd, 	"sabal",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sabd_advsimd, 	"sabd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sabdl_advsimd, 	"sabdl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sadalp_advsimd, 	"sadalp",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_saddl_advsimd, 	"saddl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_saddlp_advsimd, 	"saddlp",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_saddlv_advsimd, 	"saddlv",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_saddw_advsimd, 	"saddw",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbc, 	"sbc",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbcs, 	"sbcs",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbfiz_sbfm, 	"sbfiz",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbfm, 	"sbfm",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbfx_sbfm, 	"sbfx",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_scvtf_advsimd_fix, 	"scvtf",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_scvtf_advsimd_fix, 	"scvtf",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_scvtf_advsimd_int, 	"scvtf",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_scvtf_advsimd_int, 	"scvtf",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_scvtf_float_fix, 	"scvtf",	list_of(fn( OPRsf))(fn( OPRscale))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_scvtf_float_int, 	"scvtf",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sdiv, 	"sdiv",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sev_hint, 	"sev",	operandSpec() ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sevl_hint, 	"sevl",	operandSpec() ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha1c_advsimd, 	"sha1c",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha1h_advsimd, 	"sha1h",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha1m_advsimd, 	"sha1m",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha1p_advsimd, 	"sha1p",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha1su0_advsimd, 	"sha1su0",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha1su1_advsimd, 	"sha1su1",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha256h2_advsimd, 	"sha256h2",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha256h_advsimd, 	"sha256h",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha256su0_advsimd, 	"sha256su0",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sha256su1_advsimd, 	"sha256su1",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_shadd_advsimd, 	"shadd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_shl_advsimd, 	"shl",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_shl_advsimd, 	"shl",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_shll_advsimd, 	"shll",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_shrn_advsimd, 	"shrn",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_shsub_advsimd, 	"shsub",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sli_advsimd, 	"sli",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sli_advsimd, 	"sli",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smaddl, 	"smaddl",	list_of(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smax_advsimd, 	"smax",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smaxp_advsimd, 	"smaxp",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smaxv_advsimd, 	"smaxv",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smc, 	"smc",	list_of(fn( ( OPRimm<20,5>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smin_advsimd, 	"smin",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sminp_advsimd, 	"sminp",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sminv_advsimd, 	"sminv",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smlal_advsimd_elt, 	"smlal",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smlal_advsimd_vec, 	"smlal",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smlsl_advsimd_elt, 	"smlsl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smlsl_advsimd_vec, 	"smlsl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smnegl_smsubl, 	"smnegl",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smov_advsimd, 	"smov",	list_of(fn( OPRQ))(fn( ( OPRimm<20,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smsubl, 	"smsubl",	list_of(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smulh, 	"smulh",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smull_advsimd_elt, 	"smull",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smull_advsimd_vec, 	"smull",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_smull_smaddl, 	"smull",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqabs_advsimd, 	"sqabs",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqabs_advsimd, 	"sqabs",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqadd_advsimd, 	"sqadd",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqadd_advsimd, 	"sqadd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmlal_advsimd_elt, 	"sqdmlal",	list_of(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmlal_advsimd_elt, 	"sqdmlal",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmlal_advsimd_vec, 	"sqdmlal",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmlal_advsimd_vec, 	"sqdmlal",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmlsl_advsimd_elt, 	"sqdmlsl",	list_of(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmlsl_advsimd_elt, 	"sqdmlsl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmlsl_advsimd_vec, 	"sqdmlsl",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmlsl_advsimd_vec, 	"sqdmlsl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmulh_advsimd_elt, 	"sqdmulh",	list_of(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmulh_advsimd_elt, 	"sqdmulh",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmulh_advsimd_vec, 	"sqdmulh",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmulh_advsimd_vec, 	"sqdmulh",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmull_advsimd_elt, 	"sqdmull",	list_of(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmull_advsimd_elt, 	"sqdmull",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmull_advsimd_vec, 	"sqdmull",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqdmull_advsimd_vec, 	"sqdmull",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqneg_advsimd, 	"sqneg",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqneg_advsimd, 	"sqneg",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrdmulh_advsimd_elt, 	"sqrdmulh",	list_of(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrdmulh_advsimd_elt, 	"sqrdmulh",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrdmulh_advsimd_vec, 	"sqrdmulh",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrdmulh_advsimd_vec, 	"sqrdmulh",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrshl_advsimd, 	"sqrshl",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrshl_advsimd, 	"sqrshl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrshrn_advsimd, 	"sqrshrn",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrshrn_advsimd, 	"sqrshrn",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrshrun_advsimd, 	"sqrshrun",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqrshrun_advsimd, 	"sqrshrun",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshl_advsimd_imm, 	"sqshl",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshl_advsimd_imm, 	"sqshl",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshl_advsimd_reg, 	"sqshl",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshl_advsimd_reg, 	"sqshl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshlu_advsimd, 	"sqshlu",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshlu_advsimd, 	"sqshlu",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshrn_advsimd, 	"sqshrn",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshrn_advsimd, 	"sqshrn",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshrun_advsimd, 	"sqshrun",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqshrun_advsimd, 	"sqshrun",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqsub_advsimd, 	"sqsub",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqsub_advsimd, 	"sqsub",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqxtn_advsimd, 	"sqxtn",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqxtn_advsimd, 	"sqxtn",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqxtun_advsimd, 	"sqxtun",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sqxtun_advsimd, 	"sqxtun",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_srhadd_advsimd, 	"srhadd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sri_advsimd, 	"sri",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sri_advsimd, 	"sri",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_srshl_advsimd, 	"srshl",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_srshl_advsimd, 	"srshl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_srshr_advsimd, 	"srshr",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_srshr_advsimd, 	"srshr",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_srsra_advsimd, 	"srsra",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_srsra_advsimd, 	"srsra",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sshl_advsimd, 	"sshl",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sshl_advsimd, 	"sshl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sshll_advsimd, 	"sshll",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sshr_advsimd, 	"sshr",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sshr_advsimd, 	"sshr",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ssra_advsimd, 	"ssra",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ssra_advsimd, 	"ssra",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ssubl_advsimd, 	"ssubl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ssubw_advsimd, 	"ssubw",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st1_advsimd_mult, 	"st1",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st1_advsimd_mult, 	"st1",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st1_advsimd_sngl, 	"st1",	list_of(fn( OPRQ))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st1_advsimd_sngl, 	"st1",	list_of(fn( OPRQ))(fn( OPRRm))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st2_advsimd_mult, 	"st2",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st2_advsimd_mult, 	"st2",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st2_advsimd_sngl, 	"st2",	list_of(fn( OPRQ))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st2_advsimd_sngl, 	"st2",	list_of(fn( OPRQ))(fn( OPRRm))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st3_advsimd_mult, 	"st3",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st3_advsimd_mult, 	"st3",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st3_advsimd_sngl, 	"st3",	list_of(fn( OPRQ))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st3_advsimd_sngl, 	"st3",	list_of(fn( OPRQ))(fn( OPRRm))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st4_advsimd_mult, 	"st4",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st4_advsimd_mult, 	"st4",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st4_advsimd_sngl, 	"st4",	list_of(fn( OPRQ))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_st4_advsimd_sngl, 	"st4",	list_of(fn( OPRQ))(fn( OPRRm))(fn( ( OPRS<12,12>) ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlr, 	"stlr",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlrb, 	"stlrb",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlrh, 	"stlrh",	list_of(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlxp, 	"stlxp",	list_of(fn( OPRsz))(fn( OPRRs))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlxr, 	"stlxr",	list_of(fn( OPRRs))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlxrb, 	"stlxrb",	list_of(fn( OPRRs))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlxrh, 	"stlxrh",	list_of(fn( OPRRs))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stnp_fpsimd, 	"stnp",	list_of(fn( OPRopc))(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stnp_gen, 	"stnp",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stp_fpsimd, 	"stp",	list_of(fn( OPRopc))(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stp_fpsimd, 	"stp",	list_of(fn( OPRopc))(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stp_fpsimd, 	"stp",	list_of(fn( OPRopc))(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stp_gen, 	"stp",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stp_gen, 	"stp",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stp_gen, 	"stp",	list_of(fn( ( OPRimm<21,15>) ))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_imm_fpsimd, 	"str",	list_of(fn( OPRsize))(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_imm_fpsimd, 	"str",	list_of(fn( OPRsize))(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_imm_fpsimd, 	"str",	list_of(fn( OPRsize))(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_imm_gen, 	"str",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_imm_gen, 	"str",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_imm_gen, 	"str",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_reg_fpsimd, 	"str",	list_of(fn( OPRsize))(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_reg_gen, 	"str",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_strb_imm, 	"strb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_strb_imm, 	"strb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_strb_imm, 	"strb",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_strb_reg, 	"strb",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_strh_imm, 	"strh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_strh_imm, 	"strh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_strh_imm, 	"strh",	list_of(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_strh_reg, 	"strh",	list_of(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRS<12,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sttr, 	"sttr",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sttrb, 	"sttrb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sttrh, 	"sttrh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stur_fpsimd, 	"stur",	list_of(fn( OPRsize))(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stur_gen, 	"stur",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sturb, 	"sturb",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sturh, 	"sturh",	list_of(fn( ( OPRimm<20,12>) ))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stxp, 	"stxp",	list_of(fn( OPRsz))(fn( OPRRs))(fn( OPRRt2))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stxr, 	"stxr",	list_of(fn( OPRRs))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stxrb, 	"stxrb",	list_of(fn( OPRRs))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_stxrh, 	"stxrh",	list_of(fn( OPRRs))(fn( OPRRn))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sub_addsub_ext, 	"sub",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRimm<12,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sub_addsub_imm, 	"sub",	list_of(fn( OPRsf))(fn( OPRshift))(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sub_addsub_shift, 	"sub",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sub_advsimd, 	"sub",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sub_advsimd, 	"sub",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_subhn_advsimd, 	"subhn",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_subs_addsub_ext, 	"subs",	list_of(fn( OPRsf))(fn( OPRRm))(fn( ( OPRoption<15,13>) ))(fn( ( OPRimm<12,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_subs_addsub_imm, 	"subs",	list_of(fn( OPRsf))(fn( OPRshift))(fn( ( OPRimm<21,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_subs_addsub_shift, 	"subs",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_suqadd_advsimd, 	"suqadd",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_suqadd_advsimd, 	"suqadd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_svc, 	"svc",	list_of(fn( ( OPRimm<20,5>) )) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sxtb_sbfm, 	"sxtb",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sxth_sbfm, 	"sxth",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sxtl_sshll_advsimd, 	"sxtl",	list_of(fn( OPRQ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sxtw_sbfm, 	"sxtw",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sys, 	"sys",	list_of(fn( OPRop1))(fn( OPRCRn))(fn( OPRCRm))(fn( OPRop2))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_sysl, 	"sysl",	list_of(fn( OPRop1))(fn( OPRCRn))(fn( OPRCRm))(fn( OPRop2))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_tbl_advsimd, 	"tbl",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRlen))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_tbnz, 	"tbnz",	list_of(fn( OPRb5))(fn( OPRb40))(fn( ( OPRimm<18,5>) ))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_tbx_advsimd, 	"tbx",	list_of(fn( OPRQ))(fn( OPRRm))(fn( OPRlen))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_tbz, 	"tbz",	list_of(fn( OPRb5))(fn( OPRb40))(fn( ( OPRimm<18,5>) ))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_tlbi_sys, 	"tlbi",	list_of(fn( OPRop1))(fn( OPRCRm))(fn( OPRop2))(fn( OPRRt)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_trn1_advsimd, 	"trn1",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_trn2_advsimd, 	"trn2",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_tst_ands_log_imm, 	"tst",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_tst_ands_log_shift, 	"tst",	list_of(fn( OPRsf))(fn( OPRshift))(fn( OPRRm))(fn( ( OPRimm<15,10>) ))(fn( OPRRn)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uaba_advsimd, 	"uaba",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uabal_advsimd, 	"uabal",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uabd_advsimd, 	"uabd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uabdl_advsimd, 	"uabdl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uadalp_advsimd, 	"uadalp",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uaddl_advsimd, 	"uaddl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uaddlp_advsimd, 	"uaddlp",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uaddlv_advsimd, 	"uaddlv",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uaddw_advsimd, 	"uaddw",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ubfiz_ubfm, 	"ubfiz",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ubfm, 	"ubfm",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ubfx_ubfm, 	"ubfx",	list_of(fn( OPRsf))(fn( ( OPRN<22,22>) ))(fn( ( OPRimm<21,16>) ))(fn( ( OPRimm<15,10>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ucvtf_advsimd_fix, 	"ucvtf",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ucvtf_advsimd_fix, 	"ucvtf",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ucvtf_advsimd_int, 	"ucvtf",	list_of(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ucvtf_advsimd_int, 	"ucvtf",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ucvtf_float_fix, 	"ucvtf",	list_of(fn( OPRsf))(fn( OPRscale))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ucvtf_float_int, 	"ucvtf",	list_of(fn( OPRsf))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_udiv, 	"udiv",	list_of(fn( OPRsf))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uhadd_advsimd, 	"uhadd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uhsub_advsimd, 	"uhsub",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umaddl, 	"umaddl",	list_of(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umax_advsimd, 	"umax",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umaxp_advsimd, 	"umaxp",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umaxv_advsimd, 	"umaxv",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umin_advsimd, 	"umin",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uminp_advsimd, 	"uminp",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uminv_advsimd, 	"uminv",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umlal_advsimd_elt, 	"umlal",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umlal_advsimd_vec, 	"umlal",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umlsl_advsimd_elt, 	"umlsl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umlsl_advsimd_vec, 	"umlsl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umnegl_umsubl, 	"umnegl",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umov_advsimd, 	"umov",	list_of(fn( OPRQ))(fn( ( OPRimm<20,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umsubl, 	"umsubl",	list_of(fn( OPRRm))(fn( OPRRa))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umulh, 	"umulh",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umull_advsimd_elt, 	"umull",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRL))(fn( OPRM))(fn( OPRRm))(fn( OPRH))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umull_advsimd_vec, 	"umull",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_umull_umaddl, 	"umull",	list_of(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqadd_advsimd, 	"uqadd",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqadd_advsimd, 	"uqadd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqrshl_advsimd, 	"uqrshl",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqrshl_advsimd, 	"uqrshl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqrshrn_advsimd, 	"uqrshrn",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqrshrn_advsimd, 	"uqrshrn",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqshl_advsimd_imm, 	"uqshl",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqshl_advsimd_imm, 	"uqshl",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqshl_advsimd_reg, 	"uqshl",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqshl_advsimd_reg, 	"uqshl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqshrn_advsimd, 	"uqshrn",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqshrn_advsimd, 	"uqshrn",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqsub_advsimd, 	"uqsub",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqsub_advsimd, 	"uqsub",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqxtn_advsimd, 	"uqxtn",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uqxtn_advsimd, 	"uqxtn",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_urecpe_advsimd, 	"urecpe",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_urhadd_advsimd, 	"urhadd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_urshl_advsimd, 	"urshl",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_urshl_advsimd, 	"urshl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_urshr_advsimd, 	"urshr",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_urshr_advsimd, 	"urshr",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ursqrte_advsimd, 	"ursqrte",	list_of(fn( OPRQ))(fn( OPRsz))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ursra_advsimd, 	"ursra",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ursra_advsimd, 	"ursra",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ushl_advsimd, 	"ushl",	list_of(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ushl_advsimd, 	"ushl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ushll_advsimd, 	"ushll",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ushr_advsimd, 	"ushr",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_ushr_advsimd, 	"ushr",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_usqadd_advsimd, 	"usqadd",	list_of(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_usqadd_advsimd, 	"usqadd",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_usra_advsimd, 	"usra",	list_of(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_usra_advsimd, 	"usra",	list_of(fn( OPRQ))(fn( ( OPRimm<18,16>) ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_usubl_advsimd, 	"usubl",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_usubw_advsimd, 	"usubw",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uxtb_ubfm, 	"uxtb",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uxth_ubfm, 	"uxth",	list_of(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uxtl_ushll_advsimd, 	"uxtl",	list_of(fn( OPRQ))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uzp1_advsimd, 	"uzp1",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_uzp2_advsimd, 	"uzp2",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_wfe_hint, 	"wfe",	operandSpec() ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_wfi_hint, 	"wfi",	operandSpec() ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_xtn_advsimd, 	"xtn",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_yield_hint, 	"yield",	operandSpec() ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_zip1_advsimd, 	"zip1",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
	main_insn_table.push_back(aarch64_insn_entry(aarch64_op_zip2_advsimd, 	"zip2",	list_of(fn( OPRQ))(fn( OPRsize))(fn( OPRRm))(fn( OPRRn))(fn( OPRRd)) ));
*** operands ***
set(['Rt', 'op1', 'op2', 'cmode', 'Rd', 'b5', 'cond', 'Ra', 'Rm', 'Rn', 'size', 'scale', 'Rs', 'imm', 'Rt2', 'type', 'CRm', 'option', 'H', 'M', 'L', 'hw', 'N', 'Q', 'S', 'len', 'opc', 'a', 'sz', 'c', 'b', 'e', 'd', 'g', 'f', 'shift', 'nzcv', 'CRn', 'h', 'o0', 'b40', 'sf', 'op'])
operand function declares
void OPRRt(){ }
void OPRop1(){ }
void OPRop2(){ }
void OPRcmode(){ }
void OPRRd(){ }
void OPRb5(){ }
void OPRcond(){ }
void OPRRa(){ }
void OPRRm(){ }
void OPRRn(){ }
void OPRsize(){ }
void OPRscale(){ }
void OPRRs(){ }
void OPRimm(){ }
void OPRRt2(){ }
void OPRtype(){ }
void OPRCRm(){ }
void OPRoption(){ }
void OPRH(){ }
void OPRM(){ }
void OPRL(){ }
void OPRhw(){ }
void OPRN(){ }
void OPRQ(){ }
void OPRS(){ }
void OPRlen(){ }
void OPRopc(){ }
void OPRa(){ }
void OPRsz(){ }
void OPRc(){ }
void OPRb(){ }
void OPRe(){ }
void OPRd(){ }
void OPRg(){ }
void OPRf(){ }
void OPRshift(){ }
void OPRnzcv(){ }
void OPRCRn(){ }
void OPRh(){ }
void OPRo0(){ }
void OPRb40(){ }
void OPRsf(){ }
void OPRop(){ }
*** decoder table ***
	main_decoder_table[0]=aarch64_mask_entry(0x18000000, map_list_of(0,1)(1,2)(2,3)(3,4),-1);
	main_decoder_table[1]=aarch64_mask_entry(0x0, branchMap(),0);
	main_decoder_table[2]=aarch64_mask_entry(0x7000000, map_list_of(0,5)(1,6)(2,7)(3,8)(4,9)(5,10)(6,11)(7,12),-1);
	main_decoder_table[5]=aarch64_mask_entry(0x20c00000, map_list_of(0,13)(1,14)(2,15)(3,16)(4,17)(5,18)(6,19)(7,20),-1);
	main_decoder_table[13]=aarch64_mask_entry(0x80208000, map_list_of(0,21)(1,22)(4,23)(5,24)(6,25)(7,26),-1);
	main_decoder_table[21]=aarch64_mask_entry(0x40000000, map_list_of(0,27)(1,28),-1);
	main_decoder_table[27]=aarch64_mask_entry(0x0, branchMap(),614);
	main_decoder_table[28]=aarch64_mask_entry(0x0, branchMap(),615);
	main_decoder_table[22]=aarch64_mask_entry(0x40000000, map_list_of(0,29)(1,30),-1);
	main_decoder_table[29]=aarch64_mask_entry(0x0, branchMap(),579);
	main_decoder_table[30]=aarch64_mask_entry(0x0, branchMap(),580);
	main_decoder_table[23]=aarch64_mask_entry(0x0, branchMap(),613);
	main_decoder_table[24]=aarch64_mask_entry(0x0, branchMap(),578);
	main_decoder_table[25]=aarch64_mask_entry(0x0, branchMap(),612);
	main_decoder_table[26]=aarch64_mask_entry(0x0, branchMap(),577);
	main_decoder_table[14]=aarch64_mask_entry(0x80208000, map_list_of(0,31)(1,32)(4,33)(5,34)(6,35)(7,36),-1);
	main_decoder_table[31]=aarch64_mask_entry(0x40000000, map_list_of(0,37)(1,38),-1);
	main_decoder_table[37]=aarch64_mask_entry(0x0, branchMap(),359);
	main_decoder_table[38]=aarch64_mask_entry(0x0, branchMap(),360);
	main_decoder_table[32]=aarch64_mask_entry(0x40000000, map_list_of(0,39)(1,40),-1);
	main_decoder_table[39]=aarch64_mask_entry(0x0, branchMap(),300);
	main_decoder_table[40]=aarch64_mask_entry(0x0, branchMap(),301);
	main_decoder_table[33]=aarch64_mask_entry(0x0, branchMap(),358);
	main_decoder_table[34]=aarch64_mask_entry(0x0, branchMap(),299);
	main_decoder_table[35]=aarch64_mask_entry(0x0, branchMap(),357);
	main_decoder_table[36]=aarch64_mask_entry(0x0, branchMap(),298);
	main_decoder_table[15]=aarch64_mask_entry(0x80208000, map_list_of(1,41)(5,42),-1);
	main_decoder_table[41]=aarch64_mask_entry(0x40000000, map_list_of(0,43)(1,44),-1);
	main_decoder_table[43]=aarch64_mask_entry(0x0, branchMap(),575);
	main_decoder_table[44]=aarch64_mask_entry(0x0, branchMap(),576);
	main_decoder_table[42]=aarch64_mask_entry(0x0, branchMap(),574);
	main_decoder_table[16]=aarch64_mask_entry(0x80208000, map_list_of(1,45)(5,46),-1);
	main_decoder_table[45]=aarch64_mask_entry(0x40000000, map_list_of(0,47)(1,48),-1);
	main_decoder_table[47]=aarch64_mask_entry(0x0, branchMap(),296);
	main_decoder_table[48]=aarch64_mask_entry(0x0, branchMap(),297);
	main_decoder_table[46]=aarch64_mask_entry(0x0, branchMap(),295);
	main_decoder_table[17]=aarch64_mask_entry(0x0, branchMap(),582);
	main_decoder_table[18]=aarch64_mask_entry(0x0, branchMap(),303);
	main_decoder_table[19]=aarch64_mask_entry(0x0, branchMap(),586);
	main_decoder_table[20]=aarch64_mask_entry(0x40000000, map_list_of(0,49)(1,50),-1);
	main_decoder_table[49]=aarch64_mask_entry(0x0, branchMap(),307);
	main_decoder_table[50]=aarch64_mask_entry(0x0, branchMap(),310);
	main_decoder_table[6]=aarch64_mask_entry(0x60c00000, map_list_of(4,51)(5,52)(6,53)(7,54)(13,55)(15,56),-1);
	main_decoder_table[51]=aarch64_mask_entry(0x0, branchMap(),588);
	main_decoder_table[52]=aarch64_mask_entry(0x0, branchMap(),309);
	main_decoder_table[53]=aarch64_mask_entry(0x0, branchMap(),587);
	main_decoder_table[54]=aarch64_mask_entry(0x0, branchMap(),308);
	main_decoder_table[55]=aarch64_mask_entry(0x0, branchMap(),312);
	main_decoder_table[56]=aarch64_mask_entry(0x0, branchMap(),311);
	main_decoder_table[7]=aarch64_mask_entry(0x60200000, map_list_of(0,57)(1,58)(2,59)(3,60)(4,61)(5,62)(6,63)(7,64),-1);
	main_decoder_table[57]=aarch64_mask_entry(0x0, branchMap(),25);
	main_decoder_table[58]=aarch64_mask_entry(0x0, branchMap(),39);
	main_decoder_table[59]=aarch64_mask_entry(0x0, branchMap(),381);
	main_decoder_table[60]=aarch64_mask_entry(0x0, branchMap(),395);
	main_decoder_table[61]=aarch64_mask_entry(0x0, branchMap(),112);
	main_decoder_table[62]=aarch64_mask_entry(0x0, branchMap(),109);
	main_decoder_table[63]=aarch64_mask_entry(0x0, branchMap(),27);
	main_decoder_table[64]=aarch64_mask_entry(0x0, branchMap(),40);
	main_decoder_table[8]=aarch64_mask_entry(0x60200000, map_list_of(0,65)(1,66)(2,67)(3,68)(4,69)(5,70)(6,71)(7,72),-1);
	main_decoder_table[65]=aarch64_mask_entry(0x0, branchMap(),7);
	main_decoder_table[66]=aarch64_mask_entry(0x0, branchMap(),5);
	main_decoder_table[67]=aarch64_mask_entry(0x0, branchMap(),15);
	main_decoder_table[68]=aarch64_mask_entry(0xc00000, map_list_of(0,73),-1);
	main_decoder_table[73]=aarch64_mask_entry(0x0, branchMap(),13);
	main_decoder_table[69]=aarch64_mask_entry(0x0, branchMap(),399);
	main_decoder_table[70]=aarch64_mask_entry(0x0, branchMap(),616);
	main_decoder_table[71]=aarch64_mask_entry(0x0, branchMap(),86);
	main_decoder_table[72]=aarch64_mask_entry(0xc00000, map_list_of(0,74),-1);
	main_decoder_table[74]=aarch64_mask_entry(0x0, branchMap(),84);
	main_decoder_table[9]=aarch64_mask_entry(0x20c00000, map_list_of(0,75)(1,76)(2,77)(3,78)(4,79)(5,80)(6,81)(7,82),-1);
	main_decoder_table[75]=aarch64_mask_entry(0x803f2000, map_list_of(0,83)(1,84),-1);
	main_decoder_table[83]=aarch64_mask_entry(0xd000, map_list_of(0,85)(2,86)(4,87),-1);
	main_decoder_table[85]=aarch64_mask_entry(0x0, branchMap(),570);
	main_decoder_table[86]=aarch64_mask_entry(0x0, branchMap(),566);
	main_decoder_table[87]=aarch64_mask_entry(0x0, branchMap(),562);
	main_decoder_table[84]=aarch64_mask_entry(0x0, branchMap(),558);
	main_decoder_table[76]=aarch64_mask_entry(0x803f2000, map_list_of(0,88)(1,89),-1);
	main_decoder_table[88]=aarch64_mask_entry(0xd000, map_list_of(0,90)(2,91)(4,92),-1);
	main_decoder_table[90]=aarch64_mask_entry(0x0, branchMap(),289);
	main_decoder_table[91]=aarch64_mask_entry(0x0, branchMap(),283);
	main_decoder_table[92]=aarch64_mask_entry(0x0, branchMap(),277);
	main_decoder_table[89]=aarch64_mask_entry(0x0, branchMap(),271);
	main_decoder_table[77]=aarch64_mask_entry(0x80202000, map_list_of(0,93)(1,94),-1);
	main_decoder_table[93]=aarch64_mask_entry(0xd000, map_list_of(0,95)(2,96)(4,97),-1);
	main_decoder_table[95]=aarch64_mask_entry(0x0, branchMap(),571);
	main_decoder_table[96]=aarch64_mask_entry(0x0, branchMap(),567);
	main_decoder_table[97]=aarch64_mask_entry(0x0, branchMap(),563);
	main_decoder_table[94]=aarch64_mask_entry(0x0, branchMap(),559);
	main_decoder_table[78]=aarch64_mask_entry(0x80202000, map_list_of(0,98)(1,99),-1);
	main_decoder_table[98]=aarch64_mask_entry(0xd000, map_list_of(0,100)(2,101)(4,102),-1);
	main_decoder_table[100]=aarch64_mask_entry(0x0, branchMap(),290);
	main_decoder_table[101]=aarch64_mask_entry(0x0, branchMap(),284);
	main_decoder_table[102]=aarch64_mask_entry(0x0, branchMap(),278);
	main_decoder_table[99]=aarch64_mask_entry(0x0, branchMap(),272);
	main_decoder_table[79]=aarch64_mask_entry(0x0, branchMap(),581);
	main_decoder_table[80]=aarch64_mask_entry(0x0, branchMap(),302);
	main_decoder_table[81]=aarch64_mask_entry(0x0, branchMap(),583);
	main_decoder_table[82]=aarch64_mask_entry(0x0, branchMap(),304);
	main_decoder_table[10]=aarch64_mask_entry(0x20c00000, map_list_of(0,103)(1,104)(2,105)(3,106)(4,107)(5,108)(6,109)(7,110),-1);
	main_decoder_table[103]=aarch64_mask_entry(0x803f2000, map_list_of(0,111)(1,112)(64,113)(65,114),-1);
	main_decoder_table[111]=aarch64_mask_entry(0x0, branchMap(),560);
	main_decoder_table[112]=aarch64_mask_entry(0x0, branchMap(),568);
	main_decoder_table[113]=aarch64_mask_entry(0x0, branchMap(),564);
	main_decoder_table[114]=aarch64_mask_entry(0x0, branchMap(),572);
	main_decoder_table[104]=aarch64_mask_entry(0x803f2000, map_list_of(0,115)(1,116)(64,117)(65,118),-1);
	main_decoder_table[115]=aarch64_mask_entry(0x0, branchMap(),273);
	main_decoder_table[116]=aarch64_mask_entry(0x0, branchMap(),285);
	main_decoder_table[117]=aarch64_mask_entry(0x0, branchMap(),279);
	main_decoder_table[118]=aarch64_mask_entry(0x0, branchMap(),291);
	main_decoder_table[105]=aarch64_mask_entry(0x80202000, map_list_of(0,119)(1,120)(2,121)(3,122),-1);
	main_decoder_table[119]=aarch64_mask_entry(0x0, branchMap(),561);
	main_decoder_table[120]=aarch64_mask_entry(0x0, branchMap(),569);
	main_decoder_table[121]=aarch64_mask_entry(0x0, branchMap(),565);
	main_decoder_table[122]=aarch64_mask_entry(0x0, branchMap(),573);
	main_decoder_table[106]=aarch64_mask_entry(0x80202000, map_list_of(0,123)(1,124)(2,125)(3,126),-1);
	main_decoder_table[123]=aarch64_mask_entry(0x0, branchMap(),274);
	main_decoder_table[124]=aarch64_mask_entry(0x0, branchMap(),286);
	main_decoder_table[125]=aarch64_mask_entry(0x0, branchMap(),280);
	main_decoder_table[126]=aarch64_mask_entry(0x0, branchMap(),292);
	main_decoder_table[107]=aarch64_mask_entry(0x0, branchMap(),585);
	main_decoder_table[108]=aarch64_mask_entry(0x0, branchMap(),306);
	main_decoder_table[109]=aarch64_mask_entry(0x0, branchMap(),584);
	main_decoder_table[110]=aarch64_mask_entry(0x0, branchMap(),305);
	main_decoder_table[11]=aarch64_mask_entry(0xa0208400, map_list_of(0,127)(1,128)(4,129)(5,130)(6,131)(7,132)(8,133)(9,134)(12,135)(13,136)(14,137)(15,138),-1);
	main_decoder_table[127]=aarch64_mask_entry(0x1800, map_list_of(0,139)(1,140)(2,141)(3,142),-1);
	main_decoder_table[139]=aarch64_mask_entry(0x0, branchMap(),634);
	main_decoder_table[140]=aarch64_mask_entry(0x6000, map_list_of(1,143)(3,144),-1);
	main_decoder_table[143]=aarch64_mask_entry(0x0, branchMap(),639);
	main_decoder_table[144]=aarch64_mask_entry(0x0, branchMap(),640);
	main_decoder_table[141]=aarch64_mask_entry(0x0, branchMap(),636);
	main_decoder_table[142]=aarch64_mask_entry(0x6000, map_list_of(0,145)(1,146)(2,147)(3,148),-1);
	main_decoder_table[145]=aarch64_mask_entry(0x0, branchMap(),721);
	main_decoder_table[146]=aarch64_mask_entry(0x0, branchMap(),727);
	main_decoder_table[147]=aarch64_mask_entry(0x0, branchMap(),722);
	main_decoder_table[148]=aarch64_mask_entry(0x0, branchMap(),728);
	main_decoder_table[128]=aarch64_mask_entry(0xc07800, map_list_of(0,149)(1,150)(3,151)(5,152)(7,153),-1);
	main_decoder_table[149]=aarch64_mask_entry(0x0, branchMap(),107);
	main_decoder_table[150]=aarch64_mask_entry(0x0, branchMap(),108);
	main_decoder_table[151]=aarch64_mask_entry(0x40000000, map_list_of(1,154),-1);
	main_decoder_table[154]=aarch64_mask_entry(0x0, branchMap(),269);
	main_decoder_table[152]=aarch64_mask_entry(0x0, branchMap(),486);
	main_decoder_table[153]=aarch64_mask_entry(0x0, branchMap(),382);
	main_decoder_table[129]=aarch64_mask_entry(0x7800, map_list_of(0,155)(1,156)(2,157)(3,158)(4,159)(5,160)(6,161)(7,162)(8,163)(9,164)(10,165)(11,166)(12,167)(13,168)(14,169)(15,170),-1);
	main_decoder_table[155]=aarch64_mask_entry(0x0, branchMap(),437);
	main_decoder_table[156]=aarch64_mask_entry(0x0, branchMap(),426);
	main_decoder_table[157]=aarch64_mask_entry(0x0, branchMap(),440);
	main_decoder_table[158]=aarch64_mask_entry(0x0, branchMap(),422);
	main_decoder_table[159]=aarch64_mask_entry(0x0, branchMap(),556);
	main_decoder_table[160]=aarch64_mask_entry(0x1f0000, map_list_of(0,171)(1,172),-1);
	main_decoder_table[171]=aarch64_mask_entry(0x0, branchMap(),438);
	main_decoder_table[172]=aarch64_mask_entry(0x0, branchMap(),725);
	main_decoder_table[161]=aarch64_mask_entry(0x0, branchMap(),557);
	main_decoder_table[162]=aarch64_mask_entry(0x1f0000, map_list_of(0,173)(16,174),-1);
	main_decoder_table[173]=aarch64_mask_entry(0x0, branchMap(),626);
	main_decoder_table[174]=aarch64_mask_entry(0x0, branchMap(),439);
	main_decoder_table[163]=aarch64_mask_entry(0x0, branchMap(),10);
	main_decoder_table[164]=aarch64_mask_entry(0x1f0000, map_list_of(0,175)(1,176)(8,177),-1);
	main_decoder_table[175]=aarch64_mask_entry(0x0, branchMap(),57);
	main_decoder_table[176]=aarch64_mask_entry(0x0, branchMap(),537);
	main_decoder_table[177]=aarch64_mask_entry(0x0, branchMap(),20);
	main_decoder_table[165]=aarch64_mask_entry(0x0, branchMap(),433);
	main_decoder_table[166]=aarch64_mask_entry(0x1f0000, map_list_of(0,178)(8,179),-1);
	main_decoder_table[178]=aarch64_mask_entry(0x0, branchMap(),90);
	main_decoder_table[179]=aarch64_mask_entry(0x0, branchMap(),19);
	main_decoder_table[167]=aarch64_mask_entry(0x0, branchMap(),621);
	main_decoder_table[168]=aarch64_mask_entry(0x1f0000, map_list_of(0,180)(1,181)(8,182),-1);
	main_decoder_table[180]=aarch64_mask_entry(0x0, branchMap(),436);
	main_decoder_table[181]=aarch64_mask_entry(0x0, branchMap(),163);
	main_decoder_table[182]=aarch64_mask_entry(0x0, branchMap(),22);
	main_decoder_table[169]=aarch64_mask_entry(0x0, branchMap(),435);
	main_decoder_table[170]=aarch64_mask_entry(0x1f0000, map_list_of(0,183)(1,184)(8,185),-1);
	main_decoder_table[183]=aarch64_mask_entry(0x0, branchMap(),493);
	main_decoder_table[184]=aarch64_mask_entry(0x0, branchMap(),156);
	main_decoder_table[185]=aarch64_mask_entry(0x0, branchMap(),21);
	main_decoder_table[130]=aarch64_mask_entry(0x7800, map_list_of(0,186)(1,187)(2,188)(3,189)(4,190)(5,191)(6,192)(7,193)(8,194)(9,195)(10,196)(11,197)(12,198)(13,199)(14,200)(15,201),-1);
	main_decoder_table[186]=aarch64_mask_entry(0x0, branchMap(),465);
	main_decoder_table[187]=aarch64_mask_entry(0x0, branchMap(),495);
	main_decoder_table[188]=aarch64_mask_entry(0x0, branchMap(),540);
	main_decoder_table[189]=aarch64_mask_entry(0xc00000, map_list_of(0,202)(1,203)(2,204)(3,205),-1);
	main_decoder_table[202]=aarch64_mask_entry(0x0, branchMap(),23);
	main_decoder_table[203]=aarch64_mask_entry(0x0, branchMap(),38);
	main_decoder_table[204]=aarch64_mask_entry(0x0, branchMap(),379);
	main_decoder_table[205]=aarch64_mask_entry(0x0, branchMap(),405);
	main_decoder_table[190]=aarch64_mask_entry(0x0, branchMap(),470);
	main_decoder_table[191]=aarch64_mask_entry(0x0, branchMap(),535);
	main_decoder_table[192]=aarch64_mask_entry(0x0, branchMap(),70);
	main_decoder_table[193]=aarch64_mask_entry(0x0, branchMap(),66);
	main_decoder_table[194]=aarch64_mask_entry(0x0, branchMap(),550);
	main_decoder_table[195]=aarch64_mask_entry(0x0, branchMap(),527);
	main_decoder_table[196]=aarch64_mask_entry(0x0, branchMap(),544);
	main_decoder_table[197]=aarch64_mask_entry(0x0, branchMap(),519);
	main_decoder_table[198]=aarch64_mask_entry(0x0, branchMap(),474);
	main_decoder_table[199]=aarch64_mask_entry(0x0, branchMap(),478);
	main_decoder_table[200]=aarch64_mask_entry(0x0, branchMap(),434);
	main_decoder_table[201]=aarch64_mask_entry(0x0, branchMap(),432);
	main_decoder_table[131]=aarch64_mask_entry(0x7800, map_list_of(0,206)(1,207)(2,208)(3,209)(4,210)(5,211)(6,212)(7,213)(8,214)(9,215)(10,216)(11,217)(12,218)(13,219)(15,220),-1);
	main_decoder_table[206]=aarch64_mask_entry(0x0, branchMap(),482);
	main_decoder_table[207]=aarch64_mask_entry(0x1f0000, map_list_of(0,221)(1,222),-1);
	main_decoder_table[221]=aarch64_mask_entry(0x0, branchMap(),72);
	main_decoder_table[222]=aarch64_mask_entry(0x800000, map_list_of(0,223)(1,224),-1);
	main_decoder_table[223]=aarch64_mask_entry(0x0, branchMap(),248);
	main_decoder_table[224]=aarch64_mask_entry(0x0, branchMap(),250);
	main_decoder_table[208]=aarch64_mask_entry(0x0, branchMap(),499);
	main_decoder_table[209]=aarch64_mask_entry(0x1f0000, map_list_of(0,225)(1,226),-1);
	main_decoder_table[225]=aarch64_mask_entry(0x0, branchMap(),64);
	main_decoder_table[226]=aarch64_mask_entry(0x800000, map_list_of(0,227)(1,228),-1);
	main_decoder_table[227]=aarch64_mask_entry(0x0, branchMap(),246);
	main_decoder_table[228]=aarch64_mask_entry(0x0, branchMap(),254);
	main_decoder_table[210]=aarch64_mask_entry(0x0, branchMap(),484);
	main_decoder_table[211]=aarch64_mask_entry(0x1f0000, map_list_of(0,229)(1,230)(16,231)(17,232),-1);
	main_decoder_table[229]=aarch64_mask_entry(0x0, branchMap(),80);
	main_decoder_table[230]=aarch64_mask_entry(0x800000, map_list_of(0,233)(1,234),-1);
	main_decoder_table[233]=aarch64_mask_entry(0x0, branchMap(),165);
	main_decoder_table[234]=aarch64_mask_entry(0x0, branchMap(),171);
	main_decoder_table[231]=aarch64_mask_entry(0x0, branchMap(),476);
	main_decoder_table[232]=aarch64_mask_entry(0x0, branchMap(),480);
	main_decoder_table[212]=aarch64_mask_entry(0x0, branchMap(),503);
	main_decoder_table[213]=aarch64_mask_entry(0x1f0000, map_list_of(0,235)(1,236)(17,237),-1);
	main_decoder_table[235]=aarch64_mask_entry(0x0, branchMap(),2);
	main_decoder_table[236]=aarch64_mask_entry(0x800000, map_list_of(0,238)(1,239),-1);
	main_decoder_table[238]=aarch64_mask_entry(0x0, branchMap(),158);
	main_decoder_table[239]=aarch64_mask_entry(0x0, branchMap(),181);
	main_decoder_table[237]=aarch64_mask_entry(0x0, branchMap(),16);
	main_decoder_table[214]=aarch64_mask_entry(0x0, branchMap(),490);
	main_decoder_table[215]=aarch64_mask_entry(0x9f0000, map_list_of(1,240)(32,241)(33,242),-1);
	main_decoder_table[240]=aarch64_mask_entry(0x0, branchMap(),151);
	main_decoder_table[241]=aarch64_mask_entry(0x0, branchMap(),141);
	main_decoder_table[242]=aarch64_mask_entry(0x0, branchMap(),698);
	main_decoder_table[216]=aarch64_mask_entry(0x0, branchMap(),511);
	main_decoder_table[217]=aarch64_mask_entry(0x9f0000, map_list_of(1,243)(32,244)(33,245),-1);
	main_decoder_table[243]=aarch64_mask_entry(0x0, branchMap(),449);
	main_decoder_table[244]=aarch64_mask_entry(0x0, branchMap(),133);
	main_decoder_table[245]=aarch64_mask_entry(0x0, branchMap(),238);
	main_decoder_table[218]=aarch64_mask_entry(0x0, branchMap(),412);
	main_decoder_table[219]=aarch64_mask_entry(0x0, branchMap(),145);
	main_decoder_table[220]=aarch64_mask_entry(0x0, branchMap(),118);
	main_decoder_table[132]=aarch64_mask_entry(0x7800, map_list_of(0,246)(1,247)(2,248)(3,249)(4,250)(5,251)(6,252)(7,253)(8,254)(9,255)(10,256)(11,257)(12,258)(14,259)(15,260),-1);
	main_decoder_table[246]=aarch64_mask_entry(0x0, branchMap(),9);
	main_decoder_table[247]=aarch64_mask_entry(0x0, branchMap(),88);
	main_decoder_table[248]=aarch64_mask_entry(0x0, branchMap(),369);
	main_decoder_table[249]=aarch64_mask_entry(0x0, branchMap(),392);
	main_decoder_table[250]=aarch64_mask_entry(0x0, branchMap(),475);
	main_decoder_table[251]=aarch64_mask_entry(0x0, branchMap(),479);
	main_decoder_table[252]=aarch64_mask_entry(0x0, branchMap(),507);
	main_decoder_table[253]=aarch64_mask_entry(0x0, branchMap(),12);
	main_decoder_table[254]=aarch64_mask_entry(0x800000, map_list_of(0,261)(1,262),-1);
	main_decoder_table[261]=aarch64_mask_entry(0x0, branchMap(),195);
	main_decoder_table[262]=aarch64_mask_entry(0x0, branchMap(),205);
	main_decoder_table[255]=aarch64_mask_entry(0x800000, map_list_of(0,263)(1,264),-1);
	main_decoder_table[263]=aarch64_mask_entry(0x0, branchMap(),215);
	main_decoder_table[264]=aarch64_mask_entry(0x0, branchMap(),218);
	main_decoder_table[256]=aarch64_mask_entry(0x800000, map_list_of(0,265)(1,266),-1);
	main_decoder_table[265]=aarch64_mask_entry(0x0, branchMap(),124);
	main_decoder_table[266]=aarch64_mask_entry(0x0, branchMap(),262);
	main_decoder_table[257]=aarch64_mask_entry(0x0, branchMap(),231);
	main_decoder_table[258]=aarch64_mask_entry(0x0, branchMap(),131);
	main_decoder_table[259]=aarch64_mask_entry(0x800000, map_list_of(0,267)(1,268),-1);
	main_decoder_table[267]=aarch64_mask_entry(0x0, branchMap(),193);
	main_decoder_table[268]=aarch64_mask_entry(0x0, branchMap(),203);
	main_decoder_table[260]=aarch64_mask_entry(0x800000, map_list_of(0,269)(1,270),-1);
	main_decoder_table[269]=aarch64_mask_entry(0x0, branchMap(),240);
	main_decoder_table[270]=aarch64_mask_entry(0x0, branchMap(),259);
	main_decoder_table[133]=aarch64_mask_entry(0x0, branchMap(),114);
	main_decoder_table[134]=aarch64_mask_entry(0x40c00000, map_list_of(4,271),-1);
	main_decoder_table[271]=aarch64_mask_entry(0x0, branchMap(),268);
	main_decoder_table[135]=aarch64_mask_entry(0x7800, map_list_of(0,272)(1,273)(2,274)(4,275)(5,276)(6,277)(7,278)(8,279)(9,280)(10,281)(11,282)(12,283)(13,284)(14,285)(15,286),-1);
	main_decoder_table[272]=aarch64_mask_entry(0x0, branchMap(),648);
	main_decoder_table[273]=aarch64_mask_entry(0x0, branchMap(),424);
	main_decoder_table[274]=aarch64_mask_entry(0x0, branchMap(),651);
	main_decoder_table[275]=aarch64_mask_entry(0x0, branchMap(),716);
	main_decoder_table[276]=aarch64_mask_entry(0x1f0000, map_list_of(0,287)(1,288),-1);
	main_decoder_table[287]=aarch64_mask_entry(0x0, branchMap(),649);
	main_decoder_table[288]=aarch64_mask_entry(0x0, branchMap(),539);
	main_decoder_table[277]=aarch64_mask_entry(0x0, branchMap(),717);
	main_decoder_table[278]=aarch64_mask_entry(0x1f0000, map_list_of(0,289)(1,290)(16,291),-1);
	main_decoder_table[289]=aarch64_mask_entry(0x0, branchMap(),713);
	main_decoder_table[290]=aarch64_mask_entry(0x0, branchMap(),468);
	main_decoder_table[291]=aarch64_mask_entry(0x0, branchMap(),650);
	main_decoder_table[279]=aarch64_mask_entry(0x0, branchMap(),417);
	main_decoder_table[280]=aarch64_mask_entry(0x1f0000, map_list_of(0,292)(1,293),-1);
	main_decoder_table[292]=aarch64_mask_entry(0x0, branchMap(),59);
	main_decoder_table[293]=aarch64_mask_entry(0x0, branchMap(),697);
	main_decoder_table[281]=aarch64_mask_entry(0x0, branchMap(),644);
	main_decoder_table[282]=aarch64_mask_entry(0xdf0000, map_list_of(0,294)(32,295),-1);
	main_decoder_table[294]=aarch64_mask_entry(0x0, branchMap(),394);
	main_decoder_table[295]=aarch64_mask_entry(0x0, branchMap(),418);
	main_decoder_table[283]=aarch64_mask_entry(0x0, branchMap(),431);
	main_decoder_table[284]=aarch64_mask_entry(0x1f0000, map_list_of(0,296)(1,297),-1);
	main_decoder_table[296]=aarch64_mask_entry(0x0, branchMap(),647);
	main_decoder_table[297]=aarch64_mask_entry(0x0, branchMap(),177);
	main_decoder_table[285]=aarch64_mask_entry(0x0, branchMap(),646);
	main_decoder_table[286]=aarch64_mask_entry(0x0, branchMap(),513);
	main_decoder_table[136]=aarch64_mask_entry(0x7800, map_list_of(0,298)(1,299)(2,300)(3,301)(4,302)(5,303)(6,304)(7,305)(8,306)(9,307)(10,308)(11,309)(12,310)(13,311)(14,312)(15,313),-1);
	main_decoder_table[298]=aarch64_mask_entry(0x0, branchMap(),662);
	main_decoder_table[299]=aarch64_mask_entry(0x0, branchMap(),683);
	main_decoder_table[300]=aarch64_mask_entry(0x0, branchMap(),699);
	main_decoder_table[301]=aarch64_mask_entry(0xc00000, map_list_of(0,314)(1,315)(2,316)(3,317),-1);
	main_decoder_table[314]=aarch64_mask_entry(0x0, branchMap(),110);
	main_decoder_table[315]=aarch64_mask_entry(0x0, branchMap(),47);
	main_decoder_table[316]=aarch64_mask_entry(0x0, branchMap(),42);
	main_decoder_table[317]=aarch64_mask_entry(0x0, branchMap(),41);
	main_decoder_table[302]=aarch64_mask_entry(0x0, branchMap(),663);
	main_decoder_table[303]=aarch64_mask_entry(0x0, branchMap(),695);
	main_decoder_table[304]=aarch64_mask_entry(0x0, branchMap(),74);
	main_decoder_table[305]=aarch64_mask_entry(0x0, branchMap(),76);
	main_decoder_table[306]=aarch64_mask_entry(0x0, branchMap(),708);
	main_decoder_table[307]=aarch64_mask_entry(0x0, branchMap(),691);
	main_decoder_table[308]=aarch64_mask_entry(0x0, branchMap(),701);
	main_decoder_table[309]=aarch64_mask_entry(0x0, branchMap(),685);
	main_decoder_table[310]=aarch64_mask_entry(0x0, branchMap(),665);
	main_decoder_table[311]=aarch64_mask_entry(0x0, branchMap(),668);
	main_decoder_table[312]=aarch64_mask_entry(0x0, branchMap(),645);
	main_decoder_table[313]=aarch64_mask_entry(0x0, branchMap(),643);
	main_decoder_table[137]=aarch64_mask_entry(0x7800, map_list_of(0,318)(1,319)(3,320)(4,321)(5,322)(7,323)(8,324)(9,325)(11,326)(15,327),-1);
	main_decoder_table[318]=aarch64_mask_entry(0x0, branchMap(),672);
	main_decoder_table[319]=aarch64_mask_entry(0x1f0000, map_list_of(0,328)(1,329),-1);
	main_decoder_table[328]=aarch64_mask_entry(0x0, branchMap(),68);
	main_decoder_table[329]=aarch64_mask_entry(0x0, branchMap(),242);
	main_decoder_table[320]=aarch64_mask_entry(0x1f0000, map_list_of(0,330)(1,331),-1);
	main_decoder_table[330]=aarch64_mask_entry(0x0, branchMap(),78);
	main_decoder_table[331]=aarch64_mask_entry(0x800000, map_list_of(0,332)(1,333),-1);
	main_decoder_table[332]=aarch64_mask_entry(0x0, branchMap(),252);
	main_decoder_table[333]=aarch64_mask_entry(0x0, branchMap(),244);
	main_decoder_table[321]=aarch64_mask_entry(0x0, branchMap(),674);
	main_decoder_table[322]=aarch64_mask_entry(0x1f0000, map_list_of(1,334)(16,335)(17,336),-1);
	main_decoder_table[334]=aarch64_mask_entry(0x800000, map_list_of(0,337)(1,338),-1);
	main_decoder_table[337]=aarch64_mask_entry(0x0, branchMap(),168);
	main_decoder_table[338]=aarch64_mask_entry(0x0, branchMap(),174);
	main_decoder_table[335]=aarch64_mask_entry(0x0, branchMap(),667);
	main_decoder_table[336]=aarch64_mask_entry(0x0, branchMap(),670);
	main_decoder_table[323]=aarch64_mask_entry(0x1f0000, map_list_of(0,339)(1,340),-1);
	main_decoder_table[339]=aarch64_mask_entry(0x0, branchMap(),398);
	main_decoder_table[340]=aarch64_mask_entry(0x800000, map_list_of(0,341)(1,342),-1);
	main_decoder_table[341]=aarch64_mask_entry(0x0, branchMap(),161);
	main_decoder_table[342]=aarch64_mask_entry(0x0, branchMap(),187);
	main_decoder_table[324]=aarch64_mask_entry(0x0, branchMap(),680);
	main_decoder_table[325]=aarch64_mask_entry(0x9f0000, map_list_of(1,343)(16,344)(32,345)(33,346)(48,347),-1);
	main_decoder_table[343]=aarch64_mask_entry(0x0, branchMap(),154);
	main_decoder_table[344]=aarch64_mask_entry(0x0, branchMap(),199);
	main_decoder_table[345]=aarch64_mask_entry(0x0, branchMap(),137);
	main_decoder_table[346]=aarch64_mask_entry(0x0, branchMap(),704);
	main_decoder_table[347]=aarch64_mask_entry(0x0, branchMap(),209);
	main_decoder_table[326]=aarch64_mask_entry(0x9f0000, map_list_of(1,348)(32,349)(33,350),-1);
	main_decoder_table[348]=aarch64_mask_entry(0x0, branchMap(),658);
	main_decoder_table[349]=aarch64_mask_entry(0x0, branchMap(),143);
	main_decoder_table[350]=aarch64_mask_entry(0x0, branchMap(),257);
	main_decoder_table[327]=aarch64_mask_entry(0x9f0000, map_list_of(16,351)(32,352)(33,353)(48,354),-1);
	main_decoder_table[351]=aarch64_mask_entry(0x0, branchMap(),202);
	main_decoder_table[352]=aarch64_mask_entry(0x0, branchMap(),232);
	main_decoder_table[353]=aarch64_mask_entry(0x0, branchMap(),260);
	main_decoder_table[354]=aarch64_mask_entry(0x0, branchMap(),212);
	main_decoder_table[138]=aarch64_mask_entry(0x7800, map_list_of(0,355)(1,356)(2,357)(3,358)(4,359)(5,360)(6,361)(8,362)(10,363)(11,364)(12,365)(13,366)(14,367)(15,368),-1);
	main_decoder_table[355]=aarch64_mask_entry(0x0, branchMap(),620);
	main_decoder_table[356]=aarch64_mask_entry(0x0, branchMap(),62);
	main_decoder_table[357]=aarch64_mask_entry(0x0, branchMap(),371);
	main_decoder_table[358]=aarch64_mask_entry(0x0, branchMap(),411);
	main_decoder_table[359]=aarch64_mask_entry(0x0, branchMap(),666);
	main_decoder_table[360]=aarch64_mask_entry(0x0, branchMap(),669);
	main_decoder_table[361]=aarch64_mask_entry(0x0, branchMap(),517);
	main_decoder_table[362]=aarch64_mask_entry(0x800000, map_list_of(0,369)(1,370),-1);
	main_decoder_table[369]=aarch64_mask_entry(0x0, branchMap(),198);
	main_decoder_table[370]=aarch64_mask_entry(0x0, branchMap(),208);
	main_decoder_table[363]=aarch64_mask_entry(0x800000, map_list_of(0,371)(1,372),-1);
	main_decoder_table[371]=aarch64_mask_entry(0x0, branchMap(),127);
	main_decoder_table[372]=aarch64_mask_entry(0x0, branchMap(),117);
	main_decoder_table[364]=aarch64_mask_entry(0x0, branchMap(),226);
	main_decoder_table[365]=aarch64_mask_entry(0x800000, map_list_of(0,373)(1,374),-1);
	main_decoder_table[373]=aarch64_mask_entry(0x0, branchMap(),135);
	main_decoder_table[374]=aarch64_mask_entry(0x0, branchMap(),139);
	main_decoder_table[366]=aarch64_mask_entry(0x800000, map_list_of(0,375)(1,376),-1);
	main_decoder_table[375]=aarch64_mask_entry(0x0, branchMap(),121);
	main_decoder_table[376]=aarch64_mask_entry(0x0, branchMap(),123);
	main_decoder_table[367]=aarch64_mask_entry(0x800000, map_list_of(0,377)(1,378),-1);
	main_decoder_table[377]=aarch64_mask_entry(0x0, branchMap(),201);
	main_decoder_table[378]=aarch64_mask_entry(0x0, branchMap(),211);
	main_decoder_table[368]=aarch64_mask_entry(0x0, branchMap(),190);
	main_decoder_table[12]=aarch64_mask_entry(0x80000400, map_list_of(0,379)(1,380),-1);
	main_decoder_table[379]=aarch64_mask_entry(0x2000f000, map_list_of(1,381)(2,382)(3,383)(5,384)(6,385)(7,386)(8,387)(9,388)(10,389)(11,390)(12,391)(13,392)(16,393)(18,394)(20,395)(22,396)(25,397)(26,398),-1);
	main_decoder_table[381]=aarch64_mask_entry(0x0, branchMap(),214);
	main_decoder_table[382]=aarch64_mask_entry(0x0, branchMap(),481);
	main_decoder_table[383]=aarch64_mask_entry(0x0, branchMap(),497);
	main_decoder_table[384]=aarch64_mask_entry(0x0, branchMap(),217);
	main_decoder_table[385]=aarch64_mask_entry(0x0, branchMap(),483);
	main_decoder_table[386]=aarch64_mask_entry(0x0, branchMap(),501);
	main_decoder_table[387]=aarch64_mask_entry(0x0, branchMap(),391);
	main_decoder_table[388]=aarch64_mask_entry(0x0, branchMap(),225);
	main_decoder_table[389]=aarch64_mask_entry(0x0, branchMap(),489);
	main_decoder_table[390]=aarch64_mask_entry(0x0, branchMap(),509);
	main_decoder_table[391]=aarch64_mask_entry(0x0, branchMap(),505);
	main_decoder_table[392]=aarch64_mask_entry(0x0, branchMap(),515);
	main_decoder_table[393]=aarch64_mask_entry(0x0, branchMap(),368);
	main_decoder_table[394]=aarch64_mask_entry(0x0, branchMap(),671);
	main_decoder_table[395]=aarch64_mask_entry(0x0, branchMap(),370);
	main_decoder_table[396]=aarch64_mask_entry(0x0, branchMap(),673);
	main_decoder_table[397]=aarch64_mask_entry(0x0, branchMap(),229);
	main_decoder_table[398]=aarch64_mask_entry(0x0, branchMap(),679);
	main_decoder_table[380]=aarch64_mask_entry(0x800800, map_list_of(0,399)(1,400),-1);
	main_decoder_table[399]=aarch64_mask_entry(0x0, branchMap(),37);
	main_decoder_table[400]=aarch64_mask_entry(0x2000f000, map_list_of(8,401)(9,402)(15,403)(24,404)(25,405)(31,406),-1);
	main_decoder_table[401]=aarch64_mask_entry(0x0, branchMap(),430);
	main_decoder_table[402]=aarch64_mask_entry(0x0, branchMap(),521);
	main_decoder_table[403]=aarch64_mask_entry(0x0, branchMap(),179);
	main_decoder_table[404]=aarch64_mask_entry(0x0, branchMap(),523);
	main_decoder_table[405]=aarch64_mask_entry(0x0, branchMap(),687);
	main_decoder_table[406]=aarch64_mask_entry(0x0, branchMap(),185);
	main_decoder_table[3]=aarch64_mask_entry(0x4000000, map_list_of(0,407)(1,408),-1);
	main_decoder_table[407]=aarch64_mask_entry(0x3000000, map_list_of(0,409)(1,410)(2,411)(3,412),-1);
	main_decoder_table[409]=aarch64_mask_entry(0x80000000, map_list_of(0,413)(1,414),-1);
	main_decoder_table[413]=aarch64_mask_entry(0x0, branchMap(),17);
	main_decoder_table[414]=aarch64_mask_entry(0x0, branchMap(),18);
	main_decoder_table[410]=aarch64_mask_entry(0x60000000, map_list_of(0,415)(1,416)(2,417)(3,418),-1);
	main_decoder_table[415]=aarch64_mask_entry(0x0, branchMap(),6);
	main_decoder_table[416]=aarch64_mask_entry(0x0, branchMap(),14);
	main_decoder_table[417]=aarch64_mask_entry(0x0, branchMap(),617);
	main_decoder_table[418]=aarch64_mask_entry(0x0, branchMap(),85);
	main_decoder_table[411]=aarch64_mask_entry(0x60800000, map_list_of(0,419)(1,420)(2,421)(4,422)(5,423)(6,424)(7,425),-1);
	main_decoder_table[419]=aarch64_mask_entry(0x0, branchMap(),24);
	main_decoder_table[420]=aarch64_mask_entry(0x0, branchMap(),377);
	main_decoder_table[421]=aarch64_mask_entry(0x0, branchMap(),380);
	main_decoder_table[422]=aarch64_mask_entry(0x0, branchMap(),111);
	main_decoder_table[423]=aarch64_mask_entry(0x0, branchMap(),378);
	main_decoder_table[424]=aarch64_mask_entry(0x0, branchMap(),26);
	main_decoder_table[425]=aarch64_mask_entry(0x0, branchMap(),384);
	main_decoder_table[412]=aarch64_mask_entry(0x60800000, map_list_of(0,426)(1,427)(2,428)(4,429),-1);
	main_decoder_table[426]=aarch64_mask_entry(0x0, branchMap(),29);
	main_decoder_table[427]=aarch64_mask_entry(0x200000, map_list_of(0,430),-1);
	main_decoder_table[430]=aarch64_mask_entry(0x0, branchMap(),115);
	main_decoder_table[428]=aarch64_mask_entry(0x0, branchMap(),34);
	main_decoder_table[429]=aarch64_mask_entry(0x0, branchMap(),362);
	main_decoder_table[408]=aarch64_mask_entry(0x60000000, map_list_of(0,431)(1,432)(2,433),-1);
	main_decoder_table[431]=aarch64_mask_entry(0x80000000, map_list_of(0,434)(1,435),-1);
	main_decoder_table[434]=aarch64_mask_entry(0x0, branchMap(),33);
	main_decoder_table[435]=aarch64_mask_entry(0x0, branchMap(),43);
	main_decoder_table[432]=aarch64_mask_entry(0x3000000, map_list_of(0,436)(1,437)(2,438)(3,439),-1);
	main_decoder_table[436]=aarch64_mask_entry(0x0, branchMap(),49);
	main_decoder_table[437]=aarch64_mask_entry(0x0, branchMap(),48);
	main_decoder_table[438]=aarch64_mask_entry(0x0, branchMap(),637);
	main_decoder_table[439]=aarch64_mask_entry(0x0, branchMap(),635);
	main_decoder_table[433]=aarch64_mask_entry(0x83000000, map_list_of(0,440)(4,441)(5,442)(6,443),-1);
	main_decoder_table[440]=aarch64_mask_entry(0x0, branchMap(),32);
	main_decoder_table[441]=aarch64_mask_entry(0xe0001f, map_list_of(1,444)(2,445)(3,446)(32,447)(64,448)(161,449)(162,450)(163,451),-1);
	main_decoder_table[444]=aarch64_mask_entry(0x0, branchMap(),627);
	main_decoder_table[445]=aarch64_mask_entry(0x0, branchMap(),266);
	main_decoder_table[446]=aarch64_mask_entry(0x0, branchMap(),477);
	main_decoder_table[447]=aarch64_mask_entry(0x0, branchMap(),46);
	main_decoder_table[448]=aarch64_mask_entry(0x0, branchMap(),265);
	main_decoder_table[449]=aarch64_mask_entry(0x0, branchMap(),100);
	main_decoder_table[450]=aarch64_mask_entry(0x0, branchMap(),101);
	main_decoder_table[451]=aarch64_mask_entry(0x0, branchMap(),102);
	main_decoder_table[442]=aarch64_mask_entry(0xf00000, map_list_of(0,452)(1,453)(2,454)(3,455),-1);
	main_decoder_table[452]=aarch64_mask_entry(0x80000, map_list_of(0,456)(1,457),-1);
	main_decoder_table[456]=aarch64_mask_entry(0xf01f, map_list_of(95,458)(127,459)(159,460),-1);
	main_decoder_table[458]=aarch64_mask_entry(0x70000, map_list_of(3,461),-1);
	main_decoder_table[461]=aarch64_mask_entry(0x0, branchMap(),264);
	main_decoder_table[459]=aarch64_mask_entry(0x700e0, map_list_of(26,462)(28,463)(29,464)(30,465),-1);
	main_decoder_table[462]=aarch64_mask_entry(0x0, branchMap(),56);
	main_decoder_table[463]=aarch64_mask_entry(0x0, branchMap(),105);
	main_decoder_table[464]=aarch64_mask_entry(0x0, branchMap(),103);
	main_decoder_table[465]=aarch64_mask_entry(0x0, branchMap(),270);
	main_decoder_table[460]=aarch64_mask_entry(0x0, branchMap(),388);
	main_decoder_table[457]=aarch64_mask_entry(0x0, branchMap(),31);
	main_decoder_table[453]=aarch64_mask_entry(0x0, branchMap(),389);
	main_decoder_table[454]=aarch64_mask_entry(0x0, branchMap(),633);
	main_decoder_table[455]=aarch64_mask_entry(0x0, branchMap(),387);
	main_decoder_table[443]=aarch64_mask_entry(0xfffc1f, map_list_of(63488,466)(129024,467)(194560,468)(325632,469)(391168,470),-1);
	main_decoder_table[466]=aarch64_mask_entry(0x0, branchMap(),45);
	main_decoder_table[467]=aarch64_mask_entry(0x0, branchMap(),44);
	main_decoder_table[468]=aarch64_mask_entry(0x0, branchMap(),420);
	main_decoder_table[469]=aarch64_mask_entry(0x0, branchMap(),113);
	main_decoder_table[470]=aarch64_mask_entry(0x0, branchMap(),104);
	main_decoder_table[4]=aarch64_mask_entry(0x27000000, map_list_of(0,471)(2,472)(3,473)(4,474)(6,475)(7,476)(8,477)(9,478)(10,479)(12,480)(13,481)(14,482)(15,483),-1);
	main_decoder_table[471]=aarch64_mask_entry(0x80000000, map_list_of(0,484)(1,485),-1);
	main_decoder_table[484]=aarch64_mask_entry(0x0, branchMap(),320);
	main_decoder_table[485]=aarch64_mask_entry(0x40000000, map_list_of(0,486)(1,487),-1);
	main_decoder_table[486]=aarch64_mask_entry(0x0, branchMap(),342);
	main_decoder_table[487]=aarch64_mask_entry(0x0, branchMap(),414);
	main_decoder_table[472]=aarch64_mask_entry(0x40e00000, map_list_of(0,488)(4,489)(6,490)(8,491)(12,492)(14,493),-1);
	main_decoder_table[488]=aarch64_mask_entry(0x0, branchMap(),3);
	main_decoder_table[489]=aarch64_mask_entry(0xc00, map_list_of(0,494)(1,495),-1);
	main_decoder_table[494]=aarch64_mask_entry(0x0, branchMap(),93);
	main_decoder_table[495]=aarch64_mask_entry(0x0, branchMap(),54);
	main_decoder_table[490]=aarch64_mask_entry(0xf000, map_list_of(0,496)(2,497)(4,498)(5,499),-1);
	main_decoder_table[496]=aarch64_mask_entry(0xc00, map_list_of(2,500)(3,501),-1);
	main_decoder_table[500]=aarch64_mask_entry(0x0, branchMap(),661);
	main_decoder_table[501]=aarch64_mask_entry(0x0, branchMap(),452);
	main_decoder_table[497]=aarch64_mask_entry(0xc00, map_list_of(0,502)(1,503)(2,504)(3,505),-1);
	main_decoder_table[502]=aarch64_mask_entry(0x0, branchMap(),361);
	main_decoder_table[503]=aarch64_mask_entry(0x0, branchMap(),364);
	main_decoder_table[504]=aarch64_mask_entry(0x0, branchMap(),28);
	main_decoder_table[505]=aarch64_mask_entry(0x0, branchMap(),428);
	main_decoder_table[498]=aarch64_mask_entry(0x0, branchMap(),91);
	main_decoder_table[499]=aarch64_mask_entry(0x0, branchMap(),92);
	main_decoder_table[491]=aarch64_mask_entry(0xfc00, map_list_of(0,506),-1);
	main_decoder_table[506]=aarch64_mask_entry(0x0, branchMap(),401);
	main_decoder_table[492]=aarch64_mask_entry(0xc00, map_list_of(0,507)(1,508),-1);
	main_decoder_table[507]=aarch64_mask_entry(0x0, branchMap(),55);
	main_decoder_table[508]=aarch64_mask_entry(0x0, branchMap(),89);
	main_decoder_table[493]=aarch64_mask_entry(0x1ff800, map_list_of(0,509)(1,510)(2,511),-1);
	main_decoder_table[509]=aarch64_mask_entry(0x400, map_list_of(0,512)(1,513),-1);
	main_decoder_table[512]=aarch64_mask_entry(0x0, branchMap(),419);
	main_decoder_table[513]=aarch64_mask_entry(0x0, branchMap(),423);
	main_decoder_table[510]=aarch64_mask_entry(0x0, branchMap(),421);
	main_decoder_table[511]=aarch64_mask_entry(0x400, map_list_of(0,514)(1,515),-1);
	main_decoder_table[514]=aarch64_mask_entry(0x0, branchMap(),60);
	main_decoder_table[515]=aarch64_mask_entry(0x0, branchMap(),58);
	main_decoder_table[473]=aarch64_mask_entry(0x40e08000, map_list_of(0,516)(1,517)(2,518)(3,519)(4,520)(10,521)(11,522)(12,523),-1);
	main_decoder_table[516]=aarch64_mask_entry(0x0, branchMap(),367);
	main_decoder_table[517]=aarch64_mask_entry(0x0, branchMap(),372);
	main_decoder_table[518]=aarch64_mask_entry(0x80000000, map_list_of(1,524),-1);
	main_decoder_table[524]=aarch64_mask_entry(0x0, branchMap(),473);
	main_decoder_table[519]=aarch64_mask_entry(0x80000000, map_list_of(1,525),-1);
	main_decoder_table[525]=aarch64_mask_entry(0x0, branchMap(),485);
	main_decoder_table[520]=aarch64_mask_entry(0x0, branchMap(),488);
	main_decoder_table[521]=aarch64_mask_entry(0x80000000, map_list_of(1,526),-1);
	main_decoder_table[526]=aarch64_mask_entry(0x0, branchMap(),664);
	main_decoder_table[522]=aarch64_mask_entry(0x80000000, map_list_of(1,527),-1);
	main_decoder_table[527]=aarch64_mask_entry(0x0, branchMap(),675);
	main_decoder_table[523]=aarch64_mask_entry(0x0, branchMap(),678);
	main_decoder_table[474]=aarch64_mask_entry(0x0, branchMap(),319);
	main_decoder_table[475]=aarch64_mask_entry(0x40200000, map_list_of(0,528)(1,529)(2,530)(3,531),-1);
	main_decoder_table[528]=aarch64_mask_entry(0x9f0000, map_list_of(2,532)(3,533)(24,534)(25,535),-1);
	main_decoder_table[532]=aarch64_mask_entry(0x0, branchMap(),450);
	main_decoder_table[533]=aarch64_mask_entry(0x0, branchMap(),659);
	main_decoder_table[534]=aarch64_mask_entry(0x0, branchMap(),182);
	main_decoder_table[535]=aarch64_mask_entry(0x0, branchMap(),188);
	main_decoder_table[529]=aarch64_mask_entry(0xc00, map_list_of(0,536)(1,537)(2,538)(3,539),-1);
	main_decoder_table[536]=aarch64_mask_entry(0x1000, map_list_of(0,540)(1,541),-1);
	main_decoder_table[540]=aarch64_mask_entry(0x6000, map_list_of(0,542)(1,543)(2,544),-1);
	main_decoder_table[542]=aarch64_mask_entry(0x168000, map_list_of(0,545)(2,546)(4,547)(6,548)(8,549),-1);
	main_decoder_table[545]=aarch64_mask_entry(0x890000, map_list_of(0,550)(1,551)(2,552)(3,553),-1);
	main_decoder_table[550]=aarch64_mask_entry(0x0, branchMap(),166);
	main_decoder_table[551]=aarch64_mask_entry(0x0, branchMap(),169);
	main_decoder_table[552]=aarch64_mask_entry(0x0, branchMap(),172);
	main_decoder_table[553]=aarch64_mask_entry(0x0, branchMap(),175);
	main_decoder_table[546]=aarch64_mask_entry(0x890000, map_list_of(0,554)(1,555),-1);
	main_decoder_table[554]=aarch64_mask_entry(0x0, branchMap(),451);
	main_decoder_table[555]=aarch64_mask_entry(0x0, branchMap(),660);
	main_decoder_table[547]=aarch64_mask_entry(0x890000, map_list_of(0,556)(1,557),-1);
	main_decoder_table[556]=aarch64_mask_entry(0x0, branchMap(),152);
	main_decoder_table[557]=aarch64_mask_entry(0x0, branchMap(),155);
	main_decoder_table[548]=aarch64_mask_entry(0x0, branchMap(),221);
	main_decoder_table[549]=aarch64_mask_entry(0x890000, map_list_of(0,558)(1,559)(2,560)(3,561),-1);
	main_decoder_table[558]=aarch64_mask_entry(0x0, branchMap(),159);
	main_decoder_table[559]=aarch64_mask_entry(0x0, branchMap(),162);
	main_decoder_table[560]=aarch64_mask_entry(0x0, branchMap(),183);
	main_decoder_table[561]=aarch64_mask_entry(0x0, branchMap(),189);
	main_decoder_table[543]=aarch64_mask_entry(0x80808017, map_list_of(0,562)(8,563),-1);
	main_decoder_table[562]=aarch64_mask_entry(0x0, branchMap(),146);
	main_decoder_table[563]=aarch64_mask_entry(0x0, branchMap(),147);
	main_decoder_table[544]=aarch64_mask_entry(0x801e0000, map_list_of(0,564)(1,565)(2,566)(3,567),-1);
	main_decoder_table[564]=aarch64_mask_entry(0x818000, map_list_of(0,568)(1,569)(2,570)(3,571),-1);
	main_decoder_table[568]=aarch64_mask_entry(0x0, branchMap(),220);
	main_decoder_table[569]=aarch64_mask_entry(0x0, branchMap(),119);
	main_decoder_table[570]=aarch64_mask_entry(0x0, branchMap(),233);
	main_decoder_table[571]=aarch64_mask_entry(0x0, branchMap(),261);
	main_decoder_table[565]=aarch64_mask_entry(0x0, branchMap(),149);
	main_decoder_table[566]=aarch64_mask_entry(0x818000, map_list_of(0,572)(1,573)(2,574)(3,575),-1);
	main_decoder_table[572]=aarch64_mask_entry(0x0, branchMap(),249);
	main_decoder_table[573]=aarch64_mask_entry(0x0, branchMap(),251);
	main_decoder_table[574]=aarch64_mask_entry(0x0, branchMap(),247);
	main_decoder_table[575]=aarch64_mask_entry(0x0, branchMap(),255);
	main_decoder_table[567]=aarch64_mask_entry(0x818000, map_list_of(0,576)(2,577)(3,578),-1);
	main_decoder_table[576]=aarch64_mask_entry(0x0, branchMap(),243);
	main_decoder_table[577]=aarch64_mask_entry(0x0, branchMap(),253);
	main_decoder_table[578]=aarch64_mask_entry(0x0, branchMap(),245);
	main_decoder_table[541]=aarch64_mask_entry(0x0, branchMap(),222);
	main_decoder_table[537]=aarch64_mask_entry(0x80800010, map_list_of(0,579)(1,580),-1);
	main_decoder_table[579]=aarch64_mask_entry(0x0, branchMap(),128);
	main_decoder_table[580]=aarch64_mask_entry(0x0, branchMap(),129);
	main_decoder_table[538]=aarch64_mask_entry(0x8080f000, map_list_of(0,581)(1,582)(2,583)(3,584)(4,585)(5,586)(6,587)(7,588)(8,589),-1);
	main_decoder_table[581]=aarch64_mask_entry(0x0, branchMap(),227);
	main_decoder_table[582]=aarch64_mask_entry(0x0, branchMap(),191);
	main_decoder_table[583]=aarch64_mask_entry(0x0, branchMap(),125);
	main_decoder_table[584]=aarch64_mask_entry(0x0, branchMap(),263);
	main_decoder_table[585]=aarch64_mask_entry(0x0, branchMap(),194);
	main_decoder_table[586]=aarch64_mask_entry(0x0, branchMap(),204);
	main_decoder_table[587]=aarch64_mask_entry(0x0, branchMap(),196);
	main_decoder_table[588]=aarch64_mask_entry(0x0, branchMap(),206);
	main_decoder_table[589]=aarch64_mask_entry(0x0, branchMap(),236);
	main_decoder_table[539]=aarch64_mask_entry(0x0, branchMap(),148);
	main_decoder_table[530]=aarch64_mask_entry(0x80c0fc00, map_list_of(0,590)(1,591)(4,592)(8,593)(12,594)(16,595)(20,596)(24,597),-1);
	main_decoder_table[590]=aarch64_mask_entry(0x0, branchMap(),455);
	main_decoder_table[591]=aarch64_mask_entry(0x0, branchMap(),106);
	main_decoder_table[592]=aarch64_mask_entry(0x0, branchMap(),458);
	main_decoder_table[593]=aarch64_mask_entry(0x0, branchMap(),457);
	main_decoder_table[594]=aarch64_mask_entry(0x0, branchMap(),459);
	main_decoder_table[595]=aarch64_mask_entry(0x0, branchMap(),462);
	main_decoder_table[596]=aarch64_mask_entry(0x0, branchMap(),461);
	main_decoder_table[597]=aarch64_mask_entry(0x0, branchMap(),464);
	main_decoder_table[531]=aarch64_mask_entry(0x8000fc00, map_list_of(2,598)(3,599)(6,600)(10,601)(11,602)(13,603)(14,604)(15,605)(17,606)(18,607)(19,608)(21,609)(23,610)(30,611)(33,612)(34,613)(35,614)(36,615)(38,616)(42,617)(44,618)(45,619)(46,620)(50,621)(52,622)(54,623)(55,624)(57,625)(58,626)(62,627)(63,628),-1);
	main_decoder_table[598]=aarch64_mask_entry(0x0, branchMap(),456);
	main_decoder_table[599]=aarch64_mask_entry(0x0, branchMap(),494);
	main_decoder_table[600]=aarch64_mask_entry(0x0, branchMap(),460);
	main_decoder_table[601]=aarch64_mask_entry(0x0, branchMap(),463);
	main_decoder_table[602]=aarch64_mask_entry(0x0, branchMap(),534);
	main_decoder_table[603]=aarch64_mask_entry(0x0, branchMap(),69);
	main_decoder_table[604]=aarch64_mask_entry(0x0, branchMap(),625);
	main_decoder_table[605]=aarch64_mask_entry(0x0, branchMap(),65);
	main_decoder_table[606]=aarch64_mask_entry(0x0, branchMap(),549);
	main_decoder_table[607]=aarch64_mask_entry(0x0, branchMap(),536);
	main_decoder_table[608]=aarch64_mask_entry(0x0, branchMap(),526);
	main_decoder_table[609]=aarch64_mask_entry(0x0, branchMap(),543);
	main_decoder_table[610]=aarch64_mask_entry(0x0, branchMap(),518);
	main_decoder_table[611]=aarch64_mask_entry(0x0, branchMap(),492);
	main_decoder_table[612]=aarch64_mask_entry(0x0, branchMap(),8);
	main_decoder_table[613]=aarch64_mask_entry(0x0, branchMap(),71);
	main_decoder_table[614]=aarch64_mask_entry(0x0, branchMap(),87);
	main_decoder_table[615]=aarch64_mask_entry(0x0, branchMap(),498);
	main_decoder_table[616]=aarch64_mask_entry(0x0, branchMap(),63);
	main_decoder_table[617]=aarch64_mask_entry(0x1f0000, map_list_of(0,629)(1,630),-1);
	main_decoder_table[629]=aarch64_mask_entry(0x0, branchMap(),79);
	main_decoder_table[630]=aarch64_mask_entry(0x800000, map_list_of(0,631)(1,632),-1);
	main_decoder_table[631]=aarch64_mask_entry(0x0, branchMap(),164);
	main_decoder_table[632]=aarch64_mask_entry(0x0, branchMap(),170);
	main_decoder_table[618]=aarch64_mask_entry(0x0, branchMap(),502);
	main_decoder_table[619]=aarch64_mask_entry(0x0, branchMap(),506);
	main_decoder_table[620]=aarch64_mask_entry(0x1f0000, map_list_of(0,633)(1,634)(17,635),-1);
	main_decoder_table[633]=aarch64_mask_entry(0x0, branchMap(),1);
	main_decoder_table[634]=aarch64_mask_entry(0x800000, map_list_of(0,636)(1,637),-1);
	main_decoder_table[636]=aarch64_mask_entry(0x0, branchMap(),157);
	main_decoder_table[637]=aarch64_mask_entry(0x0, branchMap(),180);
	main_decoder_table[635]=aarch64_mask_entry(0x0, branchMap(),11);
	main_decoder_table[621]=aarch64_mask_entry(0x9f0000, map_list_of(1,638)(32,639),-1);
	main_decoder_table[638]=aarch64_mask_entry(0x0, branchMap(),150);
	main_decoder_table[639]=aarch64_mask_entry(0x0, branchMap(),140);
	main_decoder_table[622]=aarch64_mask_entry(0x0, branchMap(),510);
	main_decoder_table[623]=aarch64_mask_entry(0x9f0000, map_list_of(1,640)(32,641)(33,642),-1);
	main_decoder_table[640]=aarch64_mask_entry(0x0, branchMap(),448);
	main_decoder_table[641]=aarch64_mask_entry(0x0, branchMap(),132);
	main_decoder_table[642]=aarch64_mask_entry(0x0, branchMap(),237);
	main_decoder_table[624]=aarch64_mask_entry(0x0, branchMap(),230);
	main_decoder_table[625]=aarch64_mask_entry(0x0, branchMap(),130);
	main_decoder_table[626]=aarch64_mask_entry(0x0, branchMap(),144);
	main_decoder_table[627]=aarch64_mask_entry(0x0, branchMap(),241);
	main_decoder_table[628]=aarch64_mask_entry(0x800000, map_list_of(0,643)(1,644),-1);
	main_decoder_table[643]=aarch64_mask_entry(0x0, branchMap(),239);
	main_decoder_table[644]=aarch64_mask_entry(0x0, branchMap(),258);
	main_decoder_table[476]=aarch64_mask_entry(0xc0008000, map_list_of(0,645)(1,646)(2,647)(3,648),-1);
	main_decoder_table[645]=aarch64_mask_entry(0xa00000, map_list_of(0,649)(1,650),-1);
	main_decoder_table[649]=aarch64_mask_entry(0x0, branchMap(),192);
	main_decoder_table[650]=aarch64_mask_entry(0x0, branchMap(),234);
	main_decoder_table[646]=aarch64_mask_entry(0xa00000, map_list_of(0,651)(1,652),-1);
	main_decoder_table[651]=aarch64_mask_entry(0x0, branchMap(),223);
	main_decoder_table[652]=aarch64_mask_entry(0x0, branchMap(),235);
	main_decoder_table[647]=aarch64_mask_entry(0x7400, map_list_of(1,653)(2,654)(3,655)(5,656)(6,657)(7,658)(10,659)(11,660)(14,661)(15,662),-1);
	main_decoder_table[653]=aarch64_mask_entry(0x0, branchMap(),552);
	main_decoder_table[654]=aarch64_mask_entry(0x0, branchMap(),213);
	main_decoder_table[655]=aarch64_mask_entry(0x0, branchMap(),554);
	main_decoder_table[656]=aarch64_mask_entry(0x0, branchMap(),545);
	main_decoder_table[657]=aarch64_mask_entry(0x0, branchMap(),496);
	main_decoder_table[658]=aarch64_mask_entry(0x0, branchMap(),547);
	main_decoder_table[659]=aarch64_mask_entry(0x0, branchMap(),216);
	main_decoder_table[660]=aarch64_mask_entry(0x0, branchMap(),466);
	main_decoder_table[661]=aarch64_mask_entry(0x0, branchMap(),500);
	main_decoder_table[662]=aarch64_mask_entry(0x0, branchMap(),524);
	main_decoder_table[648]=aarch64_mask_entry(0x7400, map_list_of(2,663)(3,664)(6,665)(8,666)(10,667)(13,668)(15,669),-1);
	main_decoder_table[663]=aarch64_mask_entry(0x0, branchMap(),224);
	main_decoder_table[664]=aarch64_mask_entry(0x800800, map_list_of(0,670)(1,671),-1);
	main_decoder_table[670]=aarch64_mask_entry(0x0, branchMap(),530);
	main_decoder_table[671]=aarch64_mask_entry(0x0, branchMap(),520);
	main_decoder_table[665]=aarch64_mask_entry(0x0, branchMap(),508);
	main_decoder_table[666]=aarch64_mask_entry(0x0, branchMap(),504);
	main_decoder_table[667]=aarch64_mask_entry(0x0, branchMap(),514);
	main_decoder_table[668]=aarch64_mask_entry(0x0, branchMap(),446);
	main_decoder_table[669]=aarch64_mask_entry(0x0, branchMap(),178);
	main_decoder_table[477]=aarch64_mask_entry(0x80a00c00, map_list_of(0,672)(1,673)(2,674)(3,675)(6,676)(8,677)(9,678)(10,679)(11,680)(14,681)(16,682)(17,683)(18,684)(19,685)(22,686)(24,687)(25,688)(26,689)(27,690)(30,691),-1);
	main_decoder_table[672]=aarch64_mask_entry(0x40400000, map_list_of(0,692)(1,693)(2,694)(3,695),-1);
	main_decoder_table[692]=aarch64_mask_entry(0x0, branchMap(),610);
	main_decoder_table[693]=aarch64_mask_entry(0x0, branchMap(),352);
	main_decoder_table[694]=aarch64_mask_entry(0x0, branchMap(),611);
	main_decoder_table[695]=aarch64_mask_entry(0x0, branchMap(),353);
	main_decoder_table[673]=aarch64_mask_entry(0x40400000, map_list_of(0,696)(1,697)(2,698)(3,699),-1);
	main_decoder_table[696]=aarch64_mask_entry(0x0, branchMap(),597);
	main_decoder_table[697]=aarch64_mask_entry(0x0, branchMap(),323);
	main_decoder_table[698]=aarch64_mask_entry(0x0, branchMap(),601);
	main_decoder_table[699]=aarch64_mask_entry(0x0, branchMap(),327);
	main_decoder_table[674]=aarch64_mask_entry(0x40400000, map_list_of(0,700)(1,701)(2,702)(3,703),-1);
	main_decoder_table[700]=aarch64_mask_entry(0x0, branchMap(),606);
	main_decoder_table[701]=aarch64_mask_entry(0x0, branchMap(),345);
	main_decoder_table[702]=aarch64_mask_entry(0x0, branchMap(),607);
	main_decoder_table[703]=aarch64_mask_entry(0x0, branchMap(),346);
	main_decoder_table[675]=aarch64_mask_entry(0x40400000, map_list_of(0,704)(1,705)(2,706)(3,707),-1);
	main_decoder_table[704]=aarch64_mask_entry(0x0, branchMap(),598);
	main_decoder_table[705]=aarch64_mask_entry(0x0, branchMap(),324);
	main_decoder_table[706]=aarch64_mask_entry(0x0, branchMap(),602);
	main_decoder_table[707]=aarch64_mask_entry(0x0, branchMap(),328);
	main_decoder_table[676]=aarch64_mask_entry(0x40400000, map_list_of(0,708)(1,709)(2,710)(3,711),-1);
	main_decoder_table[708]=aarch64_mask_entry(0x0, branchMap(),600);
	main_decoder_table[709]=aarch64_mask_entry(0x0, branchMap(),326);
	main_decoder_table[710]=aarch64_mask_entry(0x0, branchMap(),604);
	main_decoder_table[711]=aarch64_mask_entry(0x0, branchMap(),330);
	main_decoder_table[677]=aarch64_mask_entry(0x40000000, map_list_of(0,712)(1,713),-1);
	main_decoder_table[712]=aarch64_mask_entry(0x0, branchMap(),354);
	main_decoder_table[713]=aarch64_mask_entry(0x0, branchMap(),355);
	main_decoder_table[678]=aarch64_mask_entry(0x40000000, map_list_of(0,714)(1,715),-1);
	main_decoder_table[714]=aarch64_mask_entry(0x0, branchMap(),331);
	main_decoder_table[715]=aarch64_mask_entry(0x0, branchMap(),335);
	main_decoder_table[679]=aarch64_mask_entry(0x40000000, map_list_of(0,716)(1,717),-1);
	main_decoder_table[716]=aarch64_mask_entry(0x0, branchMap(),347);
	main_decoder_table[717]=aarch64_mask_entry(0x0, branchMap(),348);
	main_decoder_table[680]=aarch64_mask_entry(0x40000000, map_list_of(0,718)(1,719),-1);
	main_decoder_table[718]=aarch64_mask_entry(0x0, branchMap(),332);
	main_decoder_table[719]=aarch64_mask_entry(0x0, branchMap(),336);
	main_decoder_table[681]=aarch64_mask_entry(0x40000000, map_list_of(0,720)(1,721),-1);
	main_decoder_table[720]=aarch64_mask_entry(0x0, branchMap(),334);
	main_decoder_table[721]=aarch64_mask_entry(0x0, branchMap(),338);
	main_decoder_table[682]=aarch64_mask_entry(0x400000, map_list_of(0,722)(1,723),-1);
	main_decoder_table[722]=aarch64_mask_entry(0x0, branchMap(),609);
	main_decoder_table[723]=aarch64_mask_entry(0x0, branchMap(),351);
	main_decoder_table[683]=aarch64_mask_entry(0x400000, map_list_of(0,724)(1,725),-1);
	main_decoder_table[724]=aarch64_mask_entry(0x0, branchMap(),592);
	main_decoder_table[725]=aarch64_mask_entry(0x0, branchMap(),316);
	main_decoder_table[684]=aarch64_mask_entry(0x400000, map_list_of(0,726)(1,727),-1);
	main_decoder_table[726]=aarch64_mask_entry(0x0, branchMap(),605);
	main_decoder_table[727]=aarch64_mask_entry(0x0, branchMap(),344);
	main_decoder_table[685]=aarch64_mask_entry(0x400000, map_list_of(0,728)(1,729),-1);
	main_decoder_table[728]=aarch64_mask_entry(0x0, branchMap(),593);
	main_decoder_table[729]=aarch64_mask_entry(0x0, branchMap(),317);
	main_decoder_table[686]=aarch64_mask_entry(0x400000, map_list_of(0,730)(1,731),-1);
	main_decoder_table[730]=aarch64_mask_entry(0x0, branchMap(),596);
	main_decoder_table[731]=aarch64_mask_entry(0x0, branchMap(),322);
	main_decoder_table[687]=aarch64_mask_entry(0x40400000, map_list_of(0,732)(2,733),-1);
	main_decoder_table[732]=aarch64_mask_entry(0x0, branchMap(),356);
	main_decoder_table[733]=aarch64_mask_entry(0x0, branchMap(),416);
	main_decoder_table[688]=aarch64_mask_entry(0x0, branchMap(),339);
	main_decoder_table[689]=aarch64_mask_entry(0x0, branchMap(),349);
	main_decoder_table[690]=aarch64_mask_entry(0x0, branchMap(),340);
	main_decoder_table[691]=aarch64_mask_entry(0x40400000, map_list_of(0,734)(2,735),-1);
	main_decoder_table[734]=aarch64_mask_entry(0x0, branchMap(),343);
	main_decoder_table[735]=aarch64_mask_entry(0x0, branchMap(),415);
	main_decoder_table[478]=aarch64_mask_entry(0x80800000, map_list_of(0,736)(1,737)(2,738)(3,739),-1);
	main_decoder_table[736]=aarch64_mask_entry(0x40400000, map_list_of(0,740)(1,741)(2,742)(3,743),-1);
	main_decoder_table[740]=aarch64_mask_entry(0x0, branchMap(),599);
	main_decoder_table[741]=aarch64_mask_entry(0x0, branchMap(),325);
	main_decoder_table[742]=aarch64_mask_entry(0x0, branchMap(),603);
	main_decoder_table[743]=aarch64_mask_entry(0x0, branchMap(),329);
	main_decoder_table[737]=aarch64_mask_entry(0x40000000, map_list_of(0,744)(1,745),-1);
	main_decoder_table[744]=aarch64_mask_entry(0x0, branchMap(),333);
	main_decoder_table[745]=aarch64_mask_entry(0x0, branchMap(),337);
	main_decoder_table[738]=aarch64_mask_entry(0x400000, map_list_of(0,746)(1,747),-1);
	main_decoder_table[746]=aarch64_mask_entry(0x0, branchMap(),594);
	main_decoder_table[747]=aarch64_mask_entry(0x0, branchMap(),318);
	main_decoder_table[739]=aarch64_mask_entry(0x40400000, map_list_of(0,748)(2,749),-1);
	main_decoder_table[748]=aarch64_mask_entry(0x0, branchMap(),341);
	main_decoder_table[749]=aarch64_mask_entry(0x0, branchMap(),413);
	main_decoder_table[479]=aarch64_mask_entry(0x40e00c00, map_list_of(0,750)(8,751)(10,752)(32,753)(40,754)(42,755),-1);
	main_decoder_table[750]=aarch64_mask_entry(0x0, branchMap(),4);
	main_decoder_table[751]=aarch64_mask_entry(0x0, branchMap(),51);
	main_decoder_table[752]=aarch64_mask_entry(0x0, branchMap(),50);
	main_decoder_table[753]=aarch64_mask_entry(0xf000, map_list_of(0,756),-1);
	main_decoder_table[756]=aarch64_mask_entry(0x0, branchMap(),402);
	main_decoder_table[754]=aarch64_mask_entry(0x0, branchMap(),53);
	main_decoder_table[755]=aarch64_mask_entry(0x0, branchMap(),52);
	main_decoder_table[480]=aarch64_mask_entry(0x600c00, map_list_of(0,757)(1,758)(3,759)(6,760)(8,761)(9,762)(11,763)(14,764),-1);
	main_decoder_table[757]=aarch64_mask_entry(0x0, branchMap(),608);
	main_decoder_table[758]=aarch64_mask_entry(0x0, branchMap(),589);
	main_decoder_table[759]=aarch64_mask_entry(0x0, branchMap(),590);
	main_decoder_table[760]=aarch64_mask_entry(0x0, branchMap(),595);
	main_decoder_table[761]=aarch64_mask_entry(0x0, branchMap(),350);
	main_decoder_table[762]=aarch64_mask_entry(0x0, branchMap(),313);
	main_decoder_table[763]=aarch64_mask_entry(0x0, branchMap(),314);
	main_decoder_table[764]=aarch64_mask_entry(0x0, branchMap(),321);
	main_decoder_table[481]=aarch64_mask_entry(0x400000, map_list_of(0,765)(1,766),-1);
	main_decoder_table[765]=aarch64_mask_entry(0x0, branchMap(),591);
	main_decoder_table[766]=aarch64_mask_entry(0x0, branchMap(),315);
	main_decoder_table[482]=aarch64_mask_entry(0xc020fc00, map_list_of(195,767)(202,768)(203,769)(205,770)(206,771)(207,772)(209,773)(210,774)(211,775)(213,776)(215,777)(218,778)(222,779)(225,780)(226,781)(227,782)(230,783)(234,784)(237,785)(238,786)(242,787)(245,788)(246,789)(249,790)(251,791)(254,792),-1);
	main_decoder_table[767]=aarch64_mask_entry(0x0, branchMap(),682);
	main_decoder_table[768]=aarch64_mask_entry(0x0, branchMap(),538);
	main_decoder_table[769]=aarch64_mask_entry(0x0, branchMap(),694);
	main_decoder_table[770]=aarch64_mask_entry(0x0, branchMap(),73);
	main_decoder_table[771]=aarch64_mask_entry(0x0, branchMap(),712);
	main_decoder_table[772]=aarch64_mask_entry(0x0, branchMap(),75);
	main_decoder_table[773]=aarch64_mask_entry(0x0, branchMap(),707);
	main_decoder_table[774]=aarch64_mask_entry(0x0, branchMap(),696);
	main_decoder_table[775]=aarch64_mask_entry(0x0, branchMap(),690);
	main_decoder_table[776]=aarch64_mask_entry(0x0, branchMap(),700);
	main_decoder_table[777]=aarch64_mask_entry(0x0, branchMap(),684);
	main_decoder_table[778]=aarch64_mask_entry(0x0, branchMap(),176);
	main_decoder_table[779]=aarch64_mask_entry(0x0, branchMap(),512);
	main_decoder_table[780]=aarch64_mask_entry(0x0, branchMap(),619);
	main_decoder_table[781]=aarch64_mask_entry(0x0, branchMap(),67);
	main_decoder_table[782]=aarch64_mask_entry(0x0, branchMap(),61);
	main_decoder_table[783]=aarch64_mask_entry(0x0, branchMap(),77);
	main_decoder_table[784]=aarch64_mask_entry(0x9f0000, map_list_of(1,793)(33,794),-1);
	main_decoder_table[793]=aarch64_mask_entry(0x0, branchMap(),167);
	main_decoder_table[794]=aarch64_mask_entry(0x0, branchMap(),173);
	main_decoder_table[785]=aarch64_mask_entry(0x0, branchMap(),516);
	main_decoder_table[786]=aarch64_mask_entry(0x1f0000, map_list_of(0,795)(1,796),-1);
	main_decoder_table[795]=aarch64_mask_entry(0x0, branchMap(),397);
	main_decoder_table[796]=aarch64_mask_entry(0x800000, map_list_of(0,797)(1,798),-1);
	main_decoder_table[797]=aarch64_mask_entry(0x0, branchMap(),160);
	main_decoder_table[798]=aarch64_mask_entry(0x0, branchMap(),186);
	main_decoder_table[787]=aarch64_mask_entry(0x9f0000, map_list_of(1,799)(16,800)(32,801)(48,802),-1);
	main_decoder_table[799]=aarch64_mask_entry(0x0, branchMap(),153);
	main_decoder_table[800]=aarch64_mask_entry(0x0, branchMap(),197);
	main_decoder_table[801]=aarch64_mask_entry(0x0, branchMap(),136);
	main_decoder_table[802]=aarch64_mask_entry(0x0, branchMap(),207);
	main_decoder_table[788]=aarch64_mask_entry(0x0, branchMap(),116);
	main_decoder_table[789]=aarch64_mask_entry(0x9f0000, map_list_of(1,803)(16,804)(32,805)(33,806),-1);
	main_decoder_table[803]=aarch64_mask_entry(0x0, branchMap(),657);
	main_decoder_table[804]=aarch64_mask_entry(0x0, branchMap(),126);
	main_decoder_table[805]=aarch64_mask_entry(0x0, branchMap(),142);
	main_decoder_table[806]=aarch64_mask_entry(0x0, branchMap(),256);
	main_decoder_table[790]=aarch64_mask_entry(0x800000, map_list_of(0,807)(1,808),-1);
	main_decoder_table[807]=aarch64_mask_entry(0x0, branchMap(),134);
	main_decoder_table[808]=aarch64_mask_entry(0x0, branchMap(),138);
	main_decoder_table[791]=aarch64_mask_entry(0x800000, map_list_of(0,809)(1,810),-1);
	main_decoder_table[809]=aarch64_mask_entry(0x0, branchMap(),120);
	main_decoder_table[810]=aarch64_mask_entry(0x0, branchMap(),122);
	main_decoder_table[792]=aarch64_mask_entry(0x9f0000, map_list_of(16,811)(48,812),-1);
	main_decoder_table[811]=aarch64_mask_entry(0x0, branchMap(),200);
	main_decoder_table[812]=aarch64_mask_entry(0x0, branchMap(),210);
	main_decoder_table[483]=aarch64_mask_entry(0xc080f400, map_list_of(65,813)(67,814)(69,815)(71,816)(73,817)(75,818)(77,819)(79,820)(81,821)(83,822)(93,823)(95,824)(114,825),-1);
	main_decoder_table[813]=aarch64_mask_entry(0x0, branchMap(),710);
	main_decoder_table[814]=aarch64_mask_entry(0x0, branchMap(),714);
	main_decoder_table[815]=aarch64_mask_entry(0x0, branchMap(),702);
	main_decoder_table[816]=aarch64_mask_entry(0x0, branchMap(),705);
	main_decoder_table[817]=aarch64_mask_entry(0x0, branchMap(),541);
	main_decoder_table[818]=aarch64_mask_entry(0x0, branchMap(),471);
	main_decoder_table[819]=aarch64_mask_entry(0x0, branchMap(),528);
	main_decoder_table[820]=aarch64_mask_entry(0x0, branchMap(),688);
	main_decoder_table[821]=aarch64_mask_entry(0x800, map_list_of(0,826)(1,827),-1);
	main_decoder_table[826]=aarch64_mask_entry(0x0, branchMap(),532);
	main_decoder_table[827]=aarch64_mask_entry(0x0, branchMap(),522);
	main_decoder_table[822]=aarch64_mask_entry(0x800, map_list_of(0,828)(1,829),-1);
	main_decoder_table[828]=aarch64_mask_entry(0x0, branchMap(),692);
	main_decoder_table[829]=aarch64_mask_entry(0x0, branchMap(),686);
	main_decoder_table[823]=aarch64_mask_entry(0x0, branchMap(),655);
	main_decoder_table[824]=aarch64_mask_entry(0x0, branchMap(),184);
	main_decoder_table[825]=aarch64_mask_entry(0x0, branchMap(),228);
num of vaild leaves 729
processed indexex:  Set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728]) 729
missing indexes: [] 0
number of total nodes in the tree: 830
